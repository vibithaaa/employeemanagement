"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.shareWith = exports.unshareLink = exports.deleteLinkByKind = exports.unshareObject = exports.getObjectSharingSettings = exports.getSharingInformation = exports.checkPermissions = exports.getShareLink = exports.shareObject = void 0;
var tslib_1 = require("tslib");
var odata_1 = require("@pnp/odata-commonjs");
var common_1 = require("@pnp/common-commonjs");
var sharepointqueryable_js_1 = require("../sharepointqueryable.js");
var extractweburl_js_1 = require("../utils/extractweburl.js");
var types_js_1 = require("../webs/types.js");
var types_js_2 = require("./types.js");
var operations_js_1 = require("../operations.js");
var telemetry_js_1 = require("../telemetry.js");
var types_js_3 = require("../security/types.js");
var splibconfig_js_1 = require("../splibconfig.js");
/**
 * Shares an object based on the supplied options
 *
 * @param options The set of options to send to the ShareObject method
 * @param bypass If true any processing is skipped and the options are sent directly to the ShareObject method
 */
function shareObject(o, options, bypass) {
    if (bypass === void 0) { bypass = false; }
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var roleValue, userStr, postBody;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (bypass) {
                        // if the bypass flag is set send the supplied parameters directly to the service
                        return [2 /*return*/, sendShareObjectRequest(o, options)];
                    }
                    // extend our options with some defaults
                    options = (0, common_1.assign)(options, {
                        group: null,
                        includeAnonymousLinkInEmail: false,
                        propagateAcl: false,
                        useSimplifiedRoles: true,
                    }, true);
                    return [4 /*yield*/, getRoleValue(options.role, options.group)];
                case 1:
                    roleValue = _a.sent();
                    // handle the multiple input types
                    if (!Array.isArray(options.loginNames)) {
                        options.loginNames = [options.loginNames];
                    }
                    userStr = (0, common_1.jsS)(options.loginNames.map(function (Key) { return ({ Key: Key }); }));
                    postBody = {
                        peoplePickerInput: userStr,
                        roleValue: roleValue,
                        url: options.url,
                    };
                    if (options.emailData !== undefined && options.emailData !== null) {
                        postBody = (0, common_1.assign)(postBody, {
                            emailBody: options.emailData.body,
                            emailSubject: options.emailData.subject !== undefined ? options.emailData.subject : "Shared with you.",
                            sendEmail: true,
                        });
                    }
                    return [2 /*return*/, sendShareObjectRequest(o, postBody)];
            }
        });
    });
}
exports.shareObject = shareObject;
/**
 * Gets a sharing link for the supplied
 *
 * @param kind The kind of link to share
 * @param expiration The optional expiration for this link
 */
function getShareLink(kind, expiration) {
    if (expiration === void 0) { expiration = null; }
    // date needs to be an ISO string or null
    var expString = expiration !== null ? expiration.toISOString() : null;
    // clone using the factory and send the request
    var o = telemetry_js_1.tag.configure(this.clone(sharepointqueryable_js_1.SharePointQueryableInstance, "shareLink"), "sh.getShareLink");
    return (0, operations_js_1.spPost)(o, (0, odata_1.body)({
        request: {
            createLink: true,
            emailData: null,
            settings: {
                expiration: expString,
                linkKind: kind,
            },
        },
    }));
}
exports.getShareLink = getShareLink;
/**
 * Checks Permissions on the list of Users and returns back role the users have on the Item.
 *
 * @param recipients The array of Entities for which Permissions need to be checked.
 */
function checkPermissions(recipients) {
    var o = telemetry_js_1.tag.configure(this.clone(sharepointqueryable_js_1.SharePointQueryableInstance, "checkPermissions"), "sh.checkPermissions");
    return (0, operations_js_1.spPost)(o, (0, odata_1.body)({ recipients: recipients }));
}
exports.checkPermissions = checkPermissions;
/**
 * Get Sharing Information.
 *
 * @param request The SharingInformationRequest Object.
 * @param expands Expand more fields.
 *
 */
function getSharingInformation(request, expands) {
    if (request === void 0) { request = null; }
    if (expands === void 0) { expands = []; }
    var o = telemetry_js_1.tag.configure(this.clone(sharepointqueryable_js_1.SharePointQueryableInstance, "getSharingInformation"), "sh.getSharingInformation");
    return (0, operations_js_1.spPost)(o.expand.apply(o, (0, tslib_1.__spreadArray)([], (0, tslib_1.__read)(expands), false)), (0, odata_1.body)({ request: request }));
}
exports.getSharingInformation = getSharingInformation;
/**
 * Gets the sharing settings of an item.
 *
 * @param useSimplifiedRoles Determines whether to use simplified roles.
 */
function getObjectSharingSettings(useSimplifiedRoles) {
    if (useSimplifiedRoles === void 0) { useSimplifiedRoles = true; }
    var o = telemetry_js_1.tag.configure(this.clone(sharepointqueryable_js_1.SharePointQueryableInstance, "getObjectSharingSettings"), "sh.getObjectSharingSettings");
    return (0, operations_js_1.spPost)(o, (0, odata_1.body)({ useSimplifiedRoles: useSimplifiedRoles }));
}
exports.getObjectSharingSettings = getObjectSharingSettings;
/**
 * Unshares this object
 */
function unshareObject() {
    return (0, operations_js_1.spPost)(telemetry_js_1.tag.configure(this.clone(sharepointqueryable_js_1.SharePointQueryableInstance, "unshareObject"), "sh.unshareObject"));
}
exports.unshareObject = unshareObject;
/**
 * Deletes a link by type
 *
 * @param kind Deletes a sharing link by the kind of link
 */
function deleteLinkByKind(linkKind) {
    return (0, operations_js_1.spPost)(telemetry_js_1.tag.configure(this.clone(sharepointqueryable_js_1.SharePointQueryableInstance, "deleteLinkByKind"), "sh.deleteLinkByKind"), (0, odata_1.body)({ linkKind: linkKind }));
}
exports.deleteLinkByKind = deleteLinkByKind;
/**
 * Removes the specified link to the item.
 *
 * @param kind The kind of link to be deleted.
 * @param shareId
 */
function unshareLink(linkKind, shareId) {
    if (shareId === void 0) { shareId = splibconfig_js_1.emptyGuid; }
    return (0, operations_js_1.spPost)(telemetry_js_1.tag.configure(this.clone(sharepointqueryable_js_1.SharePointQueryableInstance, "unshareLink"), "sh.unshareLink"), (0, odata_1.body)({ linkKind: linkKind, shareId: shareId }));
}
exports.unshareLink = unshareLink;
/**
 * Shares this instance with the supplied users
 *
 * @param loginNames Resolved login names to share
 * @param role The role
 * @param requireSignin True to require the user is authenticated, otherwise false
 * @param propagateAcl True to apply this share to all children
 * @param emailData If supplied an email will be sent with the indicated properties
 */
function shareWith(o, loginNames, role, requireSignin, propagateAcl, emailData) {
    if (requireSignin === void 0) { requireSignin = false; }
    if (propagateAcl === void 0) { propagateAcl = false; }
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var userStr, roleFilter, w, def, postBody;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // handle the multiple input types
                    if (!Array.isArray(loginNames)) {
                        loginNames = [loginNames];
                    }
                    userStr = (0, common_1.jsS)(loginNames.map(function (login) {
                        return { Key: login };
                    }));
                    roleFilter = role === types_js_2.SharingRole.Edit ? types_js_2.RoleType.Contributor : types_js_2.RoleType.Reader;
                    w = (0, sharepointqueryable_js_1.SharePointQueryableCollection)("_api/web", "roledefinitions");
                    return [4 /*yield*/, w.select("Id").filter("RoleTypeKind eq " + roleFilter).get()];
                case 1:
                    def = _a.sent();
                    if (!Array.isArray(def) || def.length < 1) {
                        throw Error("Could not locate a role defintion with RoleTypeKind " + roleFilter);
                    }
                    postBody = {
                        includeAnonymousLinkInEmail: requireSignin,
                        peoplePickerInput: userStr,
                        propagateAcl: propagateAcl,
                        roleValue: "role:" + def[0].Id,
                        useSimplifiedRoles: true,
                    };
                    if (emailData !== undefined) {
                        postBody = (0, common_1.assign)(postBody, {
                            emailBody: emailData.body,
                            emailSubject: emailData.subject !== undefined ? emailData.subject : "",
                            sendEmail: true,
                        });
                    }
                    return [2 /*return*/, (0, operations_js_1.spPost)(telemetry_js_1.tag.configure(o.clone(sharepointqueryable_js_1.SharePointQueryableInstance, "shareObject"), "sh.shareWith"), (0, odata_1.body)(postBody))];
            }
        });
    });
}
exports.shareWith = shareWith;
function sendShareObjectRequest(o, options) {
    var w = telemetry_js_1.tag.configure((0, types_js_1.Web)((0, extractweburl_js_1.extractWebUrl)(o.toUrl()), "/_api/SP.Web.ShareObject"), "sh.sendShareObjectRequest");
    w.configureFrom(o);
    return (0, operations_js_1.spPost)(w.expand("UsersWithAccessRequests", "GroupsSharedWith"), (0, odata_1.body)(options));
}
/**
 * Calculates the roleValue string used in the sharing query
 *
 * @param role The Sharing Role
 * @param group The Group type
 */
function getRoleValue(role, group) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var _a, g1, g2, roleFilter, def;
        return (0, tslib_1.__generator)(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(group !== undefined && group !== null)) return [3 /*break*/, 7];
                    _a = group;
                    switch (_a) {
                        case types_js_2.RoleType.Contributor: return [3 /*break*/, 1];
                        case types_js_2.RoleType.Reader: return [3 /*break*/, 3];
                        case types_js_2.RoleType.Guest: return [3 /*break*/, 3];
                    }
                    return [3 /*break*/, 5];
                case 1: return [4 /*yield*/, (0, types_js_1.Web)("_api/web", "associatedmembergroup").configureFrom(this).select("Id")()];
                case 2:
                    g1 = _b.sent();
                    return [2 /*return*/, "group: " + g1.Id];
                case 3: return [4 /*yield*/, (0, types_js_1.Web)("_api/web", "associatedvisitorgroup").configureFrom(this).select("Id")()];
                case 4:
                    g2 = _b.sent();
                    return [2 /*return*/, "group: " + g2.Id];
                case 5: throw Error("Could not determine role value for supplied value. Contributor, Reader, and Guest are supported");
                case 6: return [3 /*break*/, 9];
                case 7:
                    roleFilter = role === types_js_2.SharingRole.Edit ? types_js_2.RoleType.Contributor : types_js_2.RoleType.Reader;
                    return [4 /*yield*/, (0, types_js_3.RoleDefinitions)("_api/web").select("Id").top(1).filter("RoleTypeKind eq " + roleFilter)()];
                case 8:
                    def = _b.sent();
                    if (def.length < 1) {
                        throw Error("Could not locate associated role definition for supplied role. Edit and View are supported");
                    }
                    return [2 /*return*/, "role: " + def[0].Id];
                case 9: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=funcs.js.map