"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SiteScriptActionOutcome = exports.SiteScripts = exports._SiteScripts = void 0;
var tslib_1 = require("tslib");
var odata_1 = require("@pnp/odata-commonjs");
var operations_js_1 = require("../operations.js");
var sharepointqueryable_js_1 = require("../sharepointqueryable.js");
var extractweburl_js_1 = require("../utils/extractweburl.js");
var telemetry_js_1 = require("../telemetry.js");
var escapeQueryStrValue_js_1 = require("../utils/escapeQueryStrValue.js");
var _SiteScripts = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_SiteScripts, _super);
    function _SiteScripts(baseUrl, methodName) {
        if (methodName === void 0) { methodName = ""; }
        var _this = this;
        var url = typeof baseUrl === "string" ? baseUrl : baseUrl.toUrl();
        _this = _super.call(this, (0, extractweburl_js_1.extractWebUrl)(url), "_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility." + methodName) || this;
        return _this;
    }
    _SiteScripts.prototype.execute = function (props) {
        return (0, operations_js_1.spPost)(this, (0, odata_1.body)(props));
    };
    /**
     * Gets a list of information on all existing site scripts.
     */
    _SiteScripts.prototype.getSiteScripts = function () {
        return this.clone(SiteScriptsCloneFactory, "GetSiteScripts", true).execute({});
    };
    /**
     * Creates a new site script.
     *
     * @param title The display name of the site script.
     * @param content JSON value that describes the script. For more information, see JSON reference.
     */
    _SiteScripts.prototype.createSiteScript = function (title, description, content) {
        return this.clone(SiteScriptsCloneFactory, "CreateSiteScript(Title=@title,Description=@desc)?@title='" + (0, escapeQueryStrValue_js_1.escapeQueryStrValue)(title) + "'&@desc='" + (0, escapeQueryStrValue_js_1.escapeQueryStrValue)(description) + "'")
            .execute(content);
    };
    /**
     * Gets information about a specific site script. It also returns the JSON of the script.
     *
     * @param id The ID of the site script to get information about.
     */
    _SiteScripts.prototype.getSiteScriptMetadata = function (id) {
        return this.clone(SiteScriptsCloneFactory, "GetSiteScriptMetadata").execute({ id: id });
    };
    /**
     * Deletes a site script.
     *
     * @param id The ID of the site script to delete.
     */
    _SiteScripts.prototype.deleteSiteScript = function (id) {
        return this.clone(SiteScriptsCloneFactory, "DeleteSiteScript").execute({ id: id });
    };
    /**
     * Updates a site script with new values. In the REST call, all parameters are optional except the site script Id.
     *
     * @param siteScriptUpdateInfo Object that contains the information to update a site script.
     *                             Make sure you stringify the content object or pass it in the second 'content' parameter
     * @param content (Optional) A new JSON script defining the script actions. For more information, see Site design JSON schema.
     */
    _SiteScripts.prototype.updateSiteScript = function (updateInfo, content) {
        if (content) {
            updateInfo.Content = JSON.stringify(content);
        }
        return this.clone(SiteScriptsCloneFactory, "UpdateSiteScript").execute({ updateInfo: updateInfo });
    };
    /**
     * Gets the site script syntax (JSON) for a specific list
     * @param listUrl The absolute url of the list to retrieve site script
     */
    _SiteScripts.prototype.getSiteScriptFromList = function (listUrl) {
        return this.clone(SiteScriptsCloneFactory, "GetSiteScriptFromList").execute({ listUrl: listUrl });
    };
    /**
     * Gets the site script syntax (JSON) for a specific web
     * @param webUrl The absolute url of the web to retrieve site script
     * @param extractInfo configuration object to specify what to extract
     */
    _SiteScripts.prototype.getSiteScriptFromWeb = function (webUrl, info) {
        return this.clone(SiteScriptsCloneFactory, "getSiteScriptFromWeb").execute({ webUrl: webUrl, info: info });
    };
    /**
     * Executes the indicated site design action on the indicated web.
     *
     * @param webUrl The absolute url of the web to retrieve site script
     * @param extractInfo configuration object to specify what to extract
     */
    _SiteScripts.prototype.executeSiteScriptAction = function (actionDefinition) {
        return this.clone(SiteScriptsCloneFactory, "executeSiteScriptAction").execute({ actionDefinition: actionDefinition });
    };
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("ss.getSiteScripts")
    ], _SiteScripts.prototype, "getSiteScripts", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("ss.createSiteScript")
    ], _SiteScripts.prototype, "createSiteScript", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("ss.getSiteScriptMetadata")
    ], _SiteScripts.prototype, "getSiteScriptMetadata", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("ss.deleteSiteScript")
    ], _SiteScripts.prototype, "deleteSiteScript", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("ss.updateSiteScript")
    ], _SiteScripts.prototype, "updateSiteScript", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("ss.getSiteScriptFromList")
    ], _SiteScripts.prototype, "getSiteScriptFromList", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("ss.getSiteScriptFromWeb")
    ], _SiteScripts.prototype, "getSiteScriptFromWeb", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("ss.executeSiteScriptAction")
    ], _SiteScripts.prototype, "executeSiteScriptAction", null);
    return _SiteScripts;
}(sharepointqueryable_js_1._SharePointQueryable));
exports._SiteScripts = _SiteScripts;
var SiteScripts = function (baseUrl, methodName) { return new _SiteScripts(baseUrl, methodName); };
exports.SiteScripts = SiteScripts;
var SiteScriptsCloneFactory = function (baseUrl, methodName) {
    if (methodName === void 0) { methodName = ""; }
    return (0, exports.SiteScripts)(baseUrl, methodName);
};
var SiteScriptActionOutcome;
(function (SiteScriptActionOutcome) {
    /**
     * The stage was deemed to have completed successfully.
     */
    SiteScriptActionOutcome[SiteScriptActionOutcome["Success"] = 0] = "Success";
    /**
     * The stage was deemed to have failed to complete successfully (non-blocking, rest of recipe
     * execution should still be able to proceed).
     */
    SiteScriptActionOutcome[SiteScriptActionOutcome["Failure"] = 1] = "Failure";
    /**
     * No action was taken for this stage / this stage was skipped.
     */
    SiteScriptActionOutcome[SiteScriptActionOutcome["NoOp"] = 2] = "NoOp";
    /**
     * There was an exception but the operation succeeded. This is analagous to the operation completing
     * in a "yellow" state.
     */
    SiteScriptActionOutcome[SiteScriptActionOutcome["SucceededWithException"] = 3] = "SucceededWithException";
})(SiteScriptActionOutcome = exports.SiteScriptActionOutcome || (exports.SiteScriptActionOutcome = {}));
//# sourceMappingURL=types.js.map