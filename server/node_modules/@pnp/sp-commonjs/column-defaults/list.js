"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var odata_1 = require("@pnp/odata-commonjs");
var types_js_1 = require("../lists/types.js");
var types_js_2 = require("../folders/types.js");
var common_1 = require("@pnp/common-commonjs");
var escapeQueryStrValue_js_1 = require("../utils/escapeQueryStrValue.js");
var logging_1 = require("@pnp/logging-commonjs");
var operations_js_1 = require("../operations.js");
var all_js_1 = require("../presets/all.js");
(0, odata_1.addProp)(types_js_1._List, "rootFolder", types_js_2.Folder, "rootFolder");
types_js_1._List.prototype.getDefaultColumnValues = function () {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var pathPart, webUrl, path, baseFilePath, xml, e_1, matches, tags;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.rootFolder.select("ServerRelativePath")()];
                case 1:
                    pathPart = _a.sent();
                    return [4 /*yield*/, this.select("ParentWeb/Url").expand("ParentWeb")()];
                case 2:
                    webUrl = _a.sent();
                    path = (0, common_1.combine)("/", pathPart.ServerRelativePath.DecodedUrl, "Forms/client_LocationBasedDefaults.html");
                    baseFilePath = (0, common_1.combine)(webUrl.ParentWeb.Url, "_api/web", "getFileByServerRelativePath(decodedUrl='" + (0, escapeQueryStrValue_js_1.escapeQueryStrValue)(path) + "')");
                    xml = "";
                    _a.label = 3;
                case 3:
                    _a.trys.push([3, 5, , 6]);
                    return [4 /*yield*/, (0, types_js_2.Folder)(baseFilePath, "$value").usingParser(new odata_1.TextParser())((0, odata_1.headers)({ "binaryStringResponseBody": "true" }))];
                case 4:
                    xml = _a.sent();
                    return [3 /*break*/, 6];
                case 5:
                    e_1 = _a.sent();
                    // if this call fails we assume it is because the file is 404
                    if (e_1 && e_1.status && e_1.status === 404) {
                        // return an empty array
                        return [2 /*return*/, []];
                    }
                    throw e_1;
                case 6:
                    matches = xml.match(/<a.*?<\/a>/ig);
                    tags = matches === null ? [] : matches.map(function (t) { return t.trim(); });
                    // now we need to turn these tags of form into objects
                    // <a href="/sites/dev/My%20Title"><DefaultValue FieldName="TextField">Test</DefaultValue></a>
                    return [2 /*return*/, tags.reduce(function (defVals, t) {
                            var m = /<a href="(.*?)">/ig.exec(t);
                            // if things worked out captures are:
                            // 0: whole string
                            // 1: ENCODED server relative path
                            if (m.length < 1) {
                                // this indicates an error somewhere, but we have no way to meaningfully recover
                                // perhaps the way the tags are stored has changed on the server? Check that first.
                                logging_1.Logger.write("Could not parse default column value from '" + t + "'", 2 /* Warning */);
                                return null;
                            }
                            // return the parsed out values
                            var subMatches = t.match(/<DefaultValue.*?<\/DefaultValue>/ig);
                            var subTags = subMatches === null ? [] : subMatches.map(function (st) { return st.trim(); });
                            subTags.map(function (st) {
                                var sm = /<DefaultValue FieldName="(.*?)">(.*?)<\/DefaultValue>/ig.exec(st);
                                // if things worked out captures are:
                                // 0: whole string
                                // 1: Field internal name
                                // 2: Default value as string
                                if (sm.length < 1) {
                                    logging_1.Logger.write("Could not parse default column value from '" + st + "'", 2 /* Warning */);
                                }
                                else {
                                    defVals.push({
                                        name: sm[1],
                                        path: decodeURIComponent(m[1]),
                                        value: sm[2],
                                    });
                                }
                            });
                            return defVals;
                        }, []).filter(function (v) { return v !== null; })];
            }
        });
    });
};
types_js_1._List.prototype.setDefaultColumnValues = function (defaults) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var fieldDefs, defaultsByPath, i, paths, pathDefaults, j, pathFields, tags, href, pathDefault, xml, pathPart, webUrl, path, baseFilePath, existingReceivers;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, all_js_1.SharePointQueryableCollection)(this, "fields").select("InternalName", "TypeAsString").filter("Hidden ne true")()];
                case 1:
                    fieldDefs = _a.sent();
                    defaultsByPath = {};
                    for (i = 0; i < defaults.length; i++) {
                        if (defaultsByPath[defaults[i].path] == null) {
                            defaultsByPath[defaults[i].path] = [defaults[i]];
                        }
                        else {
                            defaultsByPath[defaults[i].path].push(defaults[i]);
                        }
                    }
                    paths = Object.getOwnPropertyNames(defaultsByPath);
                    pathDefaults = [];
                    // For each path, group field defaults
                    for (j = 0; j < paths.length; j++) {
                        pathFields = defaultsByPath[paths[j]];
                        tags = pathFields.map(function (fieldDefault) {
                            var index = fieldDefs.findIndex(function (fd) { return fd.InternalName === fieldDefault.name; });
                            if (index < 0) {
                                throw Error("Field '" + fieldDefault.name + "' does not exist in the list. Please check the internal field name. Failed to set defaults.");
                            }
                            var fieldDef = fieldDefs[index];
                            var value = "";
                            switch (fieldDef.TypeAsString) {
                                case "Boolean":
                                case "Currency":
                                case "Text":
                                case "DateTime":
                                case "Number":
                                case "Choice":
                                case "User":
                                    if ((0, common_1.isArray)(fieldDefault.value)) {
                                        throw Error("The type '" + fieldDef.TypeAsString + "' does not support multiple values.");
                                    }
                                    value = "" + fieldDefault.value;
                                    break;
                                case "MultiChoice":
                                    if ((0, common_1.isArray)(fieldDefault.value)) {
                                        value = fieldDefault.value.map(function (v) { return "" + v; }).join(";");
                                    }
                                    else {
                                        value = "" + fieldDefault.value;
                                    }
                                    break;
                                case "UserMulti":
                                    if ((0, common_1.isArray)(fieldDefault.value)) {
                                        value = fieldDefault.value.map(function (v) { return "" + v; }).join(";#");
                                    }
                                    else {
                                        value = "" + fieldDefault.value;
                                    }
                                    break;
                                case "Taxonomy":
                                case "TaxonomyFieldType":
                                    if ((0, common_1.isArray)(fieldDefault.value)) {
                                        throw Error("The type '" + fieldDef.TypeAsString + "' does not support multiple values.");
                                    }
                                    else {
                                        value = fieldDefault.value.wssId + ";#" + fieldDefault.value.termName + "|" + fieldDefault.value.termId;
                                    }
                                    break;
                                case "TaxonomyMulti":
                                case "TaxonomyFieldTypeMulti":
                                    if ((0, common_1.isArray)(fieldDefault.value)) {
                                        value = fieldDefault.value.map(function (v) { return v.wssId + ";#" + v.termName + "|" + v.termId; }).join(";#");
                                    }
                                    else {
                                        value = [fieldDefault.value].map(function (v) { return v.wssId + ";#" + v.termName + "|" + v.termId; }).join(";#");
                                    }
                                    break;
                            }
                            return "<DefaultValue FieldName=\"" + fieldDefault.name + "\">" + value + "</DefaultValue>";
                        });
                        href = pathFields[0].path.replace(/ /gi, "%20");
                        pathDefault = "<a href=\"" + href + "\">" + tags.join("") + "</a>";
                        pathDefaults.push(pathDefault);
                    }
                    xml = "<MetadataDefaults>" + pathDefaults.join("") + "</MetadataDefaults>";
                    return [4 /*yield*/, this.rootFolder.select("ServerRelativePath")()];
                case 2:
                    pathPart = _a.sent();
                    return [4 /*yield*/, this.select("ParentWeb/Url").expand("ParentWeb")()];
                case 3:
                    webUrl = _a.sent();
                    path = (0, common_1.combine)("/", pathPart.ServerRelativePath.DecodedUrl, "Forms");
                    baseFilePath = (0, common_1.combine)(webUrl.ParentWeb.Url, "_api/web", "getFolderByServerRelativePath(decodedUrl='" + (0, escapeQueryStrValue_js_1.escapeQueryStrValue)(path) + "')", "files");
                    return [4 /*yield*/, (0, operations_js_1.spPost)((0, types_js_2.Folder)(baseFilePath, "add(overwrite=true,url='client_LocationBasedDefaults.html')"), { body: xml })];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, this.eventReceivers.filter("ReceiverName eq 'LocationBasedMetadataDefaultsReceiver ItemAdded'").select("ReceiverId")()];
                case 5:
                    existingReceivers = _a.sent();
                    if (!(existingReceivers.length < 1)) return [3 /*break*/, 7];
                    return [4 /*yield*/, (0, operations_js_1.spPost)((0, types_js_1.List)(this.eventReceivers, "add"), (0, odata_1.body)({
                            eventReceiverCreationInformation: {
                                EventType: 10001,
                                ReceiverAssembly: "Microsoft.Office.DocumentManagement, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c",
                                ReceiverClass: "Microsoft.Office.DocumentManagement.LocationBasedMetadataDefaultsReceiver",
                                ReceiverName: "LocationBasedMetadataDefaultsReceiver ItemAdded",
                                SequenceNumber: 1000,
                                Synchronization: 1,
                            },
                        }))];
                case 6:
                    _a.sent();
                    _a.label = 7;
                case 7: return [2 /*return*/];
            }
        });
    });
};
//# sourceMappingURL=list.js.map