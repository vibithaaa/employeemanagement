"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var odata_js_1 = require("../odata.js");
var extractweburl_js_1 = require("../utils/extractweburl.js");
var types_js_1 = require("../webs/types.js");
require("../lists/web.js");
var types_js_2 = require("../folders/types.js");
types_js_2._Folder.prototype.getDefaultColumnValues = function () {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var folderProps, serRelPath, web, docLib;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, types_js_2.Folder)(this, "Properties").select("vti_x005f_listname")()];
                case 1:
                    folderProps = _a.sent();
                    return [4 /*yield*/, this.select("ServerRelativePath")()];
                case 2:
                    serRelPath = (_a.sent()).ServerRelativePath;
                    web = (0, types_js_1.Web)((0, extractweburl_js_1.extractWebUrl)((0, odata_js_1.odataUrlFrom)(folderProps))).configureFrom(this);
                    docLib = web.lists.getById(folderProps.vti_x005f_listname);
                    return [4 /*yield*/, docLib.getDefaultColumnValues()];
                case 3: 
                // and we return the defaults associated with this folder's server relative path only
                // if you want all the defaults use list.getDefaultColumnValues()
                return [2 /*return*/, (_a.sent()).filter(function (v) { return v.path.toLowerCase() === serRelPath.DecodedUrl.toLowerCase(); })];
            }
        });
    });
};
types_js_2._Folder.prototype.setDefaultColumnValues = function (fieldDefaults, merge) {
    if (merge === void 0) { merge = true; }
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var folderProps, web, docLib, folderPath, existingDefaults, filteredExistingDefaults;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, types_js_2.Folder)(this, "Properties").select("vti_x005f_listname")()];
                case 1:
                    folderProps = _a.sent();
                    web = (0, types_js_1.Web)((0, extractweburl_js_1.extractWebUrl)((0, odata_js_1.odataUrlFrom)(folderProps))).configureFrom(this);
                    docLib = web.lists.getById(folderProps.vti_x005f_listname);
                    return [4 /*yield*/, this.select("ServerRelativePath")()];
                case 2:
                    folderPath = (_a.sent()).ServerRelativePath.DecodedUrl;
                    return [4 /*yield*/, docLib.getDefaultColumnValues()];
                case 3:
                    existingDefaults = _a.sent();
                    filteredExistingDefaults = merge ? existingDefaults : existingDefaults.filter(function (f) { return f.path !== folderPath; });
                    // we update / add any new defaults from those passed to this method
                    fieldDefaults.forEach(function (d) {
                        var existing = filteredExistingDefaults.find(function (ed) { return ed.name === d.name && ed.path === folderPath; });
                        if (existing) {
                            existing.value = d.value;
                        }
                        else {
                            filteredExistingDefaults.push({
                                name: d.name,
                                path: folderPath,
                                value: d.value,
                            });
                        }
                    });
                    // after this operation filteredExistingDefaults should contain all the value we want to write to the file
                    return [4 /*yield*/, docLib.setDefaultColumnValues(filteredExistingDefaults)];
                case 4:
                    // after this operation filteredExistingDefaults should contain all the value we want to write to the file
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
};
types_js_2._Folder.prototype.clearDefaultColumnValues = function () {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.setDefaultColumnValues([], false)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
};
//# sourceMappingURL=folder.js.map