"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SiteGroup = exports._SiteGroup = exports.SiteGroups = exports._SiteGroups = void 0;
var tslib_1 = require("tslib");
var sharepointqueryable_js_1 = require("../sharepointqueryable.js");
var types_js_1 = require("../site-users/types.js");
var common_1 = require("@pnp/common-commonjs");
var metadata_js_1 = require("../utils/metadata.js");
var odata_1 = require("@pnp/odata-commonjs");
var decorators_js_1 = require("../decorators.js");
var operations_js_1 = require("../operations.js");
var telemetry_js_1 = require("../telemetry.js");
var _SiteGroups = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_SiteGroups, _super);
    function _SiteGroups() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a group from the collection by id
     *
     * @param id The id of the group to retrieve
     */
    _SiteGroups.prototype.getById = function (id) {
        return telemetry_js_1.tag.configure((0, exports.SiteGroup)(this).concat("(" + id + ")"), "sgs.getById");
    };
    /**
     * Adds a new group to the site collection
     *
     * @param properties The group properties object of property names and values to be set for the group
     */
    _SiteGroups.prototype.add = function (properties) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var postBody, data;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = (0, odata_1.body)((0, common_1.assign)((0, metadata_js_1.metadata)("SP.Group"), properties));
                        return [4 /*yield*/, (0, operations_js_1.spPost)(telemetry_js_1.tag.configure(this, "sgs.add"), postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                group: this.getById(data.Id),
                            }];
                }
            });
        });
    };
    /**
     * Gets a group from the collection by name
     *
     * @param groupName The name of the group to retrieve
     */
    _SiteGroups.prototype.getByName = function (groupName) {
        return telemetry_js_1.tag.configure((0, exports.SiteGroup)(this, "getByName('" + groupName + "')"), "sgs.getByName");
    };
    /**
     * Removes the group with the specified member id from the collection
     *
     * @param id The id of the group to remove
     */
    _SiteGroups.prototype.removeById = function (id) {
        return (0, operations_js_1.spPost)(this.clone(exports.SiteGroups, "removeById('" + id + "')"));
    };
    /**
     * Removes the cross-site group with the specified name from the collection
     *
     * @param loginName The name of the group to remove
     */
    _SiteGroups.prototype.removeByLoginName = function (loginName) {
        return (0, operations_js_1.spPost)(this.clone(exports.SiteGroups, "removeByLoginName('" + loginName + "')"));
    };
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("sgs.removeById")
    ], _SiteGroups.prototype, "removeById", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("sgs.removeByLoginName")
    ], _SiteGroups.prototype, "removeByLoginName", null);
    _SiteGroups = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("sitegroups")
    ], _SiteGroups);
    return _SiteGroups;
}(sharepointqueryable_js_1._SharePointQueryableCollection));
exports._SiteGroups = _SiteGroups;
exports.SiteGroups = (0, sharepointqueryable_js_1.spInvokableFactory)(_SiteGroups);
var _SiteGroup = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_SiteGroup, _super);
    function _SiteGroup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Updates the group with the given property values
         *
         * @param props The group properties object of property names and values to be set for the group
         */
        _this.update = _this._update("SP.Group", function (d, p) {
            var retGroup = (0, common_1.hOP)(p, "Title") ? _this.getParent(exports.SiteGroup, _this.parentUrl, "getByName('" + p.Title + "')") : (0, exports.SiteGroup)(_this);
            return {
                data: d,
                group: retGroup,
            };
        });
        return _this;
    }
    Object.defineProperty(_SiteGroup.prototype, "users", {
        /**
         * Gets the users for this group
         *
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, types_js_1.SiteUsers)(this, "users"), "sg.users");
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Set the owner of a group using a user id
     * @param userId the id of the user that will be set as the owner of the current group
     */
    _SiteGroup.prototype.setUserAsOwner = function (userId) {
        return (0, operations_js_1.spPost)(this.clone(exports.SiteGroup, "SetUserAsOwner(" + userId + ")"));
    };
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("sg.setUserAsOwner")
    ], _SiteGroup.prototype, "setUserAsOwner", null);
    return _SiteGroup;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._SiteGroup = _SiteGroup;
exports.SiteGroup = (0, sharepointqueryable_js_1.spInvokableFactory)(_SiteGroup);
//# sourceMappingURL=types.js.map