"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = exports._App = exports.AppCatalog = exports._AppCatalog = void 0;
var tslib_1 = require("tslib");
var sharepointqueryable_js_1 = require("../sharepointqueryable.js");
var operations_js_1 = require("../operations.js");
var odata_js_1 = require("../odata.js");
var extractweburl_js_1 = require("../utils/extractweburl.js");
var types_js_1 = require("../files/types.js");
var telemetry_js_1 = require("../telemetry.js");
var index_js_1 = require("../webs/index.js");
require("../items/index.js");
var _AppCatalog = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_AppCatalog, _super);
    function _AppCatalog(baseUrl, path) {
        var _this = _super.call(this, (0, extractweburl_js_1.extractWebUrl)(typeof baseUrl === "string" ? baseUrl : baseUrl.toUrl()), path) || this;
        // get the catalog path without the AvailableApps suffix
        // used for adding, syncing to teams
        var pathSplit = path.split("/");
        _this.catalogPath = pathSplit.slice(0, pathSplit.length - 1).join("/");
        return _this;
    }
    /**
     * Get details of specific app from the app catalog
     * @param id - Specify the guid of the app
     */
    _AppCatalog.prototype.getAppById = function (id) {
        return telemetry_js_1.tag.configure((0, exports.App)(this, "getById('" + id + "')").configureFrom(this), "ac.getAppById");
    };
    /**
     * Synchronize a solution to the Microsoft Teams App Catalog
     * @param id - Specify the guid of the app
     * @param useSharePointItemId (optional) - By default this REST call requires the SP Item id of the app, not the app id.
     *                            PnPjs will try to fetch the item id by default, you can still use this parameter to pass your own item id in the first parameter
     */
    _AppCatalog.prototype.syncSolutionToTeams = function (id, useSharePointItemId) {
        if (useSharePointItemId === void 0) { useSharePointItemId = false; }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var appId, webUrl, web, listId, listItems, poster;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        appId = null;
                        webUrl = (0, extractweburl_js_1.extractWebUrl)(this.toUrl());
                        if (!useSharePointItemId) return [3 /*break*/, 1];
                        appId = id;
                        return [3 /*break*/, 4];
                    case 1:
                        web = (0, index_js_1.Web)(webUrl).configureFrom(this);
                        return [4 /*yield*/, web.lists.select("Id").filter("EntityTypeName eq 'AppCatalog'")()];
                    case 2:
                        listId = (_a.sent())[0].Id;
                        return [4 /*yield*/, web.lists.getById(listId).items.filter("AppProductID eq '" + id + "'").top(1)()];
                    case 3:
                        listItems = _a.sent();
                        if (listItems && listItems.length > 0) {
                            appId = listItems[0].Id;
                        }
                        else {
                            throw Error("Did not find the app with id " + id + " in the appcatalog.");
                        }
                        _a.label = 4;
                    case 4:
                        poster = telemetry_js_1.tag.configure((0, exports.AppCatalog)(webUrl, this.catalogPath + "/SyncSolutionToTeams(id=" + appId + ")"), "ac.syncSolutionToTeams");
                        poster.configureFrom(this);
                        return [4 /*yield*/, (0, operations_js_1.spPost)(poster, {})];
                    case 5: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Uploads an app package. Not supported for batching
     *
     * @param filename Filename to create.
     * @param content app package data (eg: the .app or .sppkg file).
     * @param shouldOverWrite Should an app with the same name in the same location be overwritten? (default: true)
     * @returns Promise<IAppAddResult>
     */
    _AppCatalog.prototype.add = function (filename, content, shouldOverWrite) {
        if (shouldOverWrite === void 0) { shouldOverWrite = true; }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var adder, r;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        adder = telemetry_js_1.tag.configure((0, exports.AppCatalog)((0, extractweburl_js_1.extractWebUrl)(this.toUrl()), this.catalogPath + "/add(overwrite=" + shouldOverWrite + ",url='" + filename + "')"), "ac.add");
                        adder.configureFrom(this);
                        return [4 /*yield*/, (0, operations_js_1.spPost)(adder, {
                                body: content, headers: {
                                    "binaryStringRequestBody": "true",
                                },
                            })];
                    case 1:
                        r = _a.sent();
                        return [2 /*return*/, {
                                data: r,
                                file: (0, types_js_1.File)((0, odata_js_1.odataUrlFrom)(r)),
                            }];
                }
            });
        });
    };
    return _AppCatalog;
}(sharepointqueryable_js_1._SharePointQueryableCollection));
exports._AppCatalog = _AppCatalog;
exports.AppCatalog = (0, sharepointqueryable_js_1.spInvokableFactory)(_AppCatalog);
var _App = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_App, _super);
    function _App() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This method deploys an app on the app catalog. It must be called in the context
     * of the tenant app catalog web or it will fail.
     *
     * @param skipFeatureDeployment Deploy the app to the entire tenant
     */
    _App.prototype.deploy = function (skipFeatureDeployment) {
        if (skipFeatureDeployment === void 0) { skipFeatureDeployment = false; }
        return this.do("Deploy(" + skipFeatureDeployment + ")");
    };
    /**
     * This method retracts a deployed app on the app catalog. It must be called in the context
     * of the tenant app catalog web or it will fail.
     */
    _App.prototype.retract = function () {
        return this.do("Retract");
    };
    /**
     * This method allows an app which is already deployed to be installed on a web
     */
    _App.prototype.install = function () {
        return this.do("Install");
    };
    /**
     * This method allows an app which is already installed to be uninstalled on a web
     * Note: when you use the REST API to uninstall a solution package from the site, it is not relocated to the recycle bin
     */
    _App.prototype.uninstall = function () {
        return this.do("Uninstall");
    };
    /**
     * This method allows an app which is already installed to be upgraded on a web
     */
    _App.prototype.upgrade = function () {
        return this.do("Upgrade");
    };
    /**
     * This method removes an app from the app catalog. It must be called in the context
     * of the tenant app catalog web or it will fail.
     */
    _App.prototype.remove = function () {
        return this.do("Remove");
    };
    _App.prototype.do = function (path) {
        return (0, operations_js_1.spPost)(this.clone(exports.App, path));
    };
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("app.deploy")
    ], _App.prototype, "deploy", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("app.retract")
    ], _App.prototype, "retract", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("app.install")
    ], _App.prototype, "install", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("app.uninstall")
    ], _App.prototype, "uninstall", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("app.upgrade")
    ], _App.prototype, "upgrade", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("app.remove")
    ], _App.prototype, "remove", null);
    return _App;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._App = _App;
exports.App = (0, sharepointqueryable_js_1.spInvokableFactory)(_App);
//# sourceMappingURL=types.js.map