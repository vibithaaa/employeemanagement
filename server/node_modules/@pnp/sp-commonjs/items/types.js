"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PagedItemCollection = exports.ItemVersion = exports._ItemVersion = exports.ItemVersions = exports._ItemVersions = exports.Item = exports._Item = exports.Items = exports._Items = void 0;
var tslib_1 = require("tslib");
var sharepointqueryable_js_1 = require("../sharepointqueryable.js");
var common_1 = require("@pnp/common-commonjs");
var types_js_1 = require("../lists/types.js");
var odata_1 = require("@pnp/odata-commonjs");
var logging_1 = require("@pnp/logging-commonjs");
var metadata_js_1 = require("../utils/metadata.js");
var decorators_js_1 = require("../decorators.js");
var operations_js_1 = require("../operations.js");
var telemetry_js_1 = require("../telemetry.js");
var extractweburl_js_1 = require("../utils/extractweburl.js");
var escapeQueryStrValue_js_1 = require("../utils/escapeQueryStrValue.js");
/**
 * Describes a collection of Item objects
 *
 */
var _Items = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Items, _super);
    function _Items() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
    * Gets an Item by id
    *
    * @param id The integer id of the item to retrieve
    */
    _Items.prototype.getById = function (id) {
        return telemetry_js_1.tag.configure((0, exports.Item)(this).concat("(" + id + ")"), "is.getById");
    };
    /**
     * Gets BCS Item by string id
     *
     * @param stringId The string id of the BCS item to retrieve
     */
    _Items.prototype.getItemByStringId = function (stringId) {
        // creates an item with the parent list path and append out method call
        return telemetry_js_1.tag.configure((0, exports.Item)(this.parentUrl, "getItemByStringId('" + stringId + "')"), "is.getItemByStringId");
    };
    /**
     * Skips the specified number of items (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#sectionSection6)
     *
     * @param skip The starting id where the page should start, use with top to specify pages
     * @param reverse It true the PagedPrev=true parameter is added allowing backwards navigation in the collection
     */
    _Items.prototype.skip = function (skip, reverse) {
        if (reverse === void 0) { reverse = false; }
        if (reverse) {
            this.query.set("$skiptoken", encodeURIComponent("Paged=TRUE&PagedPrev=TRUE&p_ID=" + skip));
        }
        else {
            this.query.set("$skiptoken", encodeURIComponent("Paged=TRUE&p_ID=" + skip));
        }
        return this;
    };
    /**
     * Gets a collection designed to aid in paging through data
     *
     */
    _Items.prototype.getPaged = function () {
        return this.usingParser(new PagedItemCollectionParser(this))();
    };
    /**
     * Gets all the items in a list, regardless of count. Does not support batching or caching
     *
     *  @param requestSize Number of items to return in each request (Default: 2000)
     *  @param acceptHeader Allows for setting the value of the Accept header for SP 2013 support
     */
    _Items.prototype.getAll = function (requestSize, acceptHeader) {
        if (requestSize === void 0) { requestSize = 2000; }
        if (acceptHeader === void 0) { acceptHeader = "application/json;odata=nometadata"; }
        logging_1.Logger.write("Calling items.getAll should be done sparingly. Ensure this is the correct choice. If you are unsure, it is not.", 2 /* Warning */);
        // this will be used for the actual query
        // and we set no metadata here to try and reduce traffic
        var items = (0, exports.Items)(this, "").top(requestSize).configure({
            headers: {
                "Accept": acceptHeader,
            },
        });
        // let's copy over the odata query params that can be applied
        // $top - allow setting the page size this way (override what we did above)
        // $select - allow picking the return fields (good behavior)
        // $filter - allow setting a filter, though this may fail due for large lists
        this.query.forEach(function (v, k) {
            if (/^\$select|filter|top|expand$/i.test(k)) {
                items.query.set(k, v);
            }
        });
        // give back the promise
        return new Promise(function (resolve, reject) {
            // this will eventually hold the items we return
            var itemsCollector = [];
            // action that will gather up our results recursively
            var gatherer = function (last) {
                // collect that set of results
                [].push.apply(itemsCollector, last.results);
                // if we have more, repeat - otherwise resolve with the collected items
                if (last.hasNext) {
                    last.getNext().then(gatherer).catch(reject);
                }
                else {
                    resolve(itemsCollector);
                }
            };
            // start the cycle
            items.getPaged().then(gatherer).catch(reject);
        });
    };
    /**
     * Adds a new item to the collection
     *
     * @param properties The new items's properties
     * @param listItemEntityTypeFullName The type name of the list's entities
     */
    _Items.prototype.add = function (properties, listItemEntityTypeFullName) {
        if (properties === void 0) { properties = {}; }
        if (listItemEntityTypeFullName === void 0) { listItemEntityTypeFullName = null; }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var removeDependency, listItemEntityType, postBody, promise;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        removeDependency = this.addBatchDependency();
                        return [4 /*yield*/, this.ensureListItemEntityTypeName(listItemEntityTypeFullName)];
                    case 1:
                        listItemEntityType = _a.sent();
                        postBody = (0, odata_1.body)((0, common_1.assign)((0, metadata_js_1.metadata)(listItemEntityType), properties));
                        promise = (0, operations_js_1.spPost)(this.clone(exports.Items, ""), postBody).then(function (data) {
                            return {
                                data: data,
                                item: _this.getById(data.Id),
                            };
                        });
                        removeDependency();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * Ensures we have the proper list item entity type name, either from the value provided or from the list
     *
     * @param candidatelistItemEntityTypeFullName The potential type name
     */
    _Items.prototype.ensureListItemEntityTypeName = function (candidatelistItemEntityTypeFullName) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                return [2 /*return*/, candidatelistItemEntityTypeFullName ?
                        candidatelistItemEntityTypeFullName :
                        this.getParent(types_js_1.List).getListItemEntityTypeFullName()];
            });
        });
    };
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("is.getPaged")
    ], _Items.prototype, "getPaged", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("is.getAll")
    ], _Items.prototype, "getAll", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("is.add")
    ], _Items.prototype, "add", null);
    _Items = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("items")
    ], _Items);
    return _Items;
}(sharepointqueryable_js_1._SharePointQueryableCollection));
exports._Items = _Items;
exports.Items = (0, sharepointqueryable_js_1.spInvokableFactory)(_Items);
/**
 * Descrines a single Item instance
 *
 */
var _Item = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Item, _super);
    function _Item() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.delete = (0, sharepointqueryable_js_1.deleteableWithETag)("i");
        return _this;
    }
    Object.defineProperty(_Item.prototype, "effectiveBasePermissions", {
        /**
         * Gets the effective base permissions for the item
         *
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, sharepointqueryable_js_1.SharePointQueryable)(this, "EffectiveBasePermissions"), "i.effectiveBasePermissions");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Item.prototype, "effectiveBasePermissionsForUI", {
        /**
         * Gets the effective base permissions for the item in a UI context
         *
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, sharepointqueryable_js_1.SharePointQueryable)(this, "EffectiveBasePermissionsForUI"), "i.effectiveBasePermissionsForUI");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Item.prototype, "fieldValuesAsHTML", {
        /**
         * Gets the field values for this list item in their HTML representation
         *
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, sharepointqueryable_js_1.SharePointQueryableInstance)(this, "FieldValuesAsHTML"), "i.fvHTML");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Item.prototype, "fieldValuesAsText", {
        /**
         * Gets the field values for this list item in their text representation
         *
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, sharepointqueryable_js_1.SharePointQueryableInstance)(this, "FieldValuesAsText"), "i.fvText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Item.prototype, "fieldValuesForEdit", {
        /**
         * Gets the field values for this list item for use in editing controls
         *
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, sharepointqueryable_js_1.SharePointQueryableInstance)(this, "FieldValuesForEdit"), "i.fvEdit");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Item.prototype, "versions", {
        /**
         * Gets the collection of versions associated with this item
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.ItemVersions)(this), "i.versions");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Item.prototype, "list", {
        get: function () {
            return this.getParent(types_js_1.List, this.parentUrl.substr(0, this.parentUrl.lastIndexOf("/")));
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Updates this list instance with the supplied properties
     *
     * @param properties A plain object hash of values to update for the list
     * @param eTag Value used in the IF-Match header, by default "*"
     * @param listItemEntityTypeFullName The type name of the list's entities
     */
    _Item.prototype.update = function (properties, eTag, listItemEntityTypeFullName) {
        if (eTag === void 0) { eTag = "*"; }
        if (listItemEntityTypeFullName === void 0) { listItemEntityTypeFullName = null; }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var removeDependency, listItemEntityType, postBody, poster, data;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        removeDependency = this.addBatchDependency();
                        return [4 /*yield*/, this.ensureListItemEntityTypeName(listItemEntityTypeFullName)];
                    case 1:
                        listItemEntityType = _a.sent();
                        postBody = (0, odata_1.body)((0, common_1.assign)((0, metadata_js_1.metadata)(listItemEntityType), properties), (0, odata_1.headers)({
                            "IF-Match": eTag,
                            "X-HTTP-Method": "MERGE",
                        }));
                        removeDependency();
                        poster = telemetry_js_1.tag.configure(this.clone(exports.Item).usingParser(new ItemUpdatedParser()), "i.update");
                        return [4 /*yield*/, (0, operations_js_1.spPost)(poster, postBody)];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                item: this,
                            }];
                }
            });
        });
    };
    /**
     * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.
     */
    _Item.prototype.recycle = function () {
        return (0, operations_js_1.spPost)(this.clone(exports.Item, "recycle"));
    };
    /**
     * Deletes the item object with options.
     *
     * @param parameters Specifies the options to use when deleting a item.
     */
    _Item.prototype.deleteWithParams = function (parameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                return [2 /*return*/, (0, operations_js_1.spPost)(this.clone(exports.Item, "DeleteWithParameters"), (0, odata_1.body)({ parameters: parameters }))];
            });
        });
    };
    /**
     * Gets a string representation of the full URL to the WOPI frame.
     * If there is no associated WOPI application, or no associated action, an empty string is returned.
     *
     * @param action Display mode: 0: view, 1: edit, 2: mobileView, 3: interactivePreview
     */
    _Item.prototype.getWopiFrameUrl = function (action) {
        if (action === void 0) { action = 0; }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var i, data;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = this.clone(exports.Item, "getWOPIFrameUrl(@action)");
                        i.query.set("@action", action);
                        return [4 /*yield*/, (0, operations_js_1.spPost)(i)];
                    case 1:
                        data = _a.sent();
                        // handle verbose mode
                        if ((0, common_1.hOP)(data, "GetWOPIFrameUrl")) {
                            return [2 /*return*/, data.GetWOPIFrameUrl];
                        }
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Validates and sets the values of the specified collection of fields for the list item.
     *
     * @param formValues The fields to change and their new values.
     * @param bNewDocumentUpdate true if the list item is a document being updated after upload; otherwise false.
     */
    _Item.prototype.validateUpdateListItem = function (formValues, bNewDocumentUpdate) {
        if (bNewDocumentUpdate === void 0) { bNewDocumentUpdate = false; }
        return (0, operations_js_1.spPost)(this.clone(exports.Item, "validateupdatelistitem"), (0, odata_1.body)({ formValues: formValues, bNewDocumentUpdate: bNewDocumentUpdate }));
    };
    /**
     * Gets the parent information for this item's list and web
     */
    _Item.prototype.getParentInfos = function () {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var urlInfo;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.select("Id", "ParentList/Id", "ParentList/Title", "ParentList/RootFolder/UniqueId", "ParentList/RootFolder/ServerRelativeUrl", "ParentList/RootFolder/ServerRelativePath", "ParentList/ParentWeb/Id", "ParentList/ParentWeb/Url", "ParentList/ParentWeb/ServerRelativeUrl", "ParentList/ParentWeb/ServerRelativePath").expand("ParentList", "ParentList/RootFolder", "ParentList/ParentWeb")()];
                    case 1:
                        urlInfo = _a.sent();
                        return [2 /*return*/, {
                                Item: {
                                    Id: urlInfo.Id,
                                },
                                ParentList: {
                                    Id: urlInfo.ParentList.Id,
                                    Title: urlInfo.ParentList.Title,
                                    RootFolderServerRelativePath: urlInfo.ParentList.RootFolder.ServerRelativePath,
                                    RootFolderServerRelativeUrl: urlInfo.ParentList.RootFolder.ServerRelativeUrl,
                                    RootFolderUniqueId: urlInfo.ParentList.RootFolder.UniqueId,
                                },
                                ParentWeb: {
                                    Id: urlInfo.ParentList.ParentWeb.Id,
                                    ServerRelativePath: urlInfo.ParentList.ParentWeb.ServerRelativePath,
                                    ServerRelativeUrl: urlInfo.ParentList.ParentWeb.ServerRelativeUrl,
                                    Url: urlInfo.ParentList.ParentWeb.Url,
                                },
                            }];
                }
            });
        });
    };
    _Item.prototype.setImageField = function (fieldName, imageName, imageContent) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var contextInfo, webUrl, q, result, itemInfo;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getParentInfos()];
                    case 1:
                        contextInfo = _a.sent();
                        webUrl = (0, extractweburl_js_1.extractWebUrl)(this.toUrl());
                        q = (0, sharepointqueryable_js_1.SharePointQueryable)(webUrl, "/_api/web/UploadImage");
                        q.concat("(listTitle=@a1,imageName=@a2,listId=@a3,itemId=@a4)");
                        q.query.set("@a1", "'" + (0, escapeQueryStrValue_js_1.escapeQueryStrValue)(contextInfo.ParentList.Title) + "'");
                        q.query.set("@a2", "'" + (0, escapeQueryStrValue_js_1.escapeQueryStrValue)(imageName) + "'");
                        q.query.set("@a3", "'" + (0, escapeQueryStrValue_js_1.escapeQueryStrValue)(contextInfo.ParentList.Id) + "'");
                        q.query.set("@a4", contextInfo.Item.Id);
                        return [4 /*yield*/, (0, operations_js_1.spPost)(q, { body: imageContent })];
                    case 2:
                        result = _a.sent();
                        itemInfo = {
                            "type": "thumbnail",
                            "fileName": result.Name,
                            "nativeFile": {},
                            "fieldName": fieldName,
                            "serverUrl": contextInfo.ParentWeb.Url.replace(contextInfo.ParentWeb.ServerRelativeUrl, ""),
                            "serverRelativeUrl": result.ServerRelativeUrl,
                            "id": result.UniqueId,
                        };
                        return [2 /*return*/, this.validateUpdateListItem([{
                                    FieldName: fieldName,
                                    FieldValue: JSON.stringify(itemInfo),
                                }])];
                }
            });
        });
    };
    /**
     * Ensures we have the proper list item entity type name, either from the value provided or from the list
     *
     * @param candidatelistItemEntityTypeFullName The potential type name
     */
    _Item.prototype.ensureListItemEntityTypeName = function (candidatelistItemEntityTypeFullName) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                return [2 /*return*/, candidatelistItemEntityTypeFullName ?
                        candidatelistItemEntityTypeFullName :
                        this.list.getListItemEntityTypeFullName()];
            });
        });
    };
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("i.recycle")
    ], _Item.prototype, "recycle", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("i.del-params")
    ], _Item.prototype, "deleteWithParams", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("i.getWopiFrameUrl")
    ], _Item.prototype, "getWopiFrameUrl", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("i.validateUpdateListItem")
    ], _Item.prototype, "validateUpdateListItem", null);
    return _Item;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._Item = _Item;
exports.Item = (0, sharepointqueryable_js_1.spInvokableFactory)(_Item);
/**
 * Describes a collection of Version objects
 *
 */
var _ItemVersions = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_ItemVersions, _super);
    function _ItemVersions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a version by id
     *
     * @param versionId The id of the version to retrieve
     */
    _ItemVersions.prototype.getById = function (versionId) {
        return telemetry_js_1.tag.configure((0, exports.ItemVersion)(this).concat("(" + versionId + ")"), "iv.getById");
    };
    _ItemVersions = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("versions")
    ], _ItemVersions);
    return _ItemVersions;
}(sharepointqueryable_js_1._SharePointQueryableCollection));
exports._ItemVersions = _ItemVersions;
exports.ItemVersions = (0, sharepointqueryable_js_1.spInvokableFactory)(_ItemVersions);
/**
 * Describes a single Version instance
 *
 */
var _ItemVersion = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_ItemVersion, _super);
    function _ItemVersion() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.delete = (0, sharepointqueryable_js_1.deleteableWithETag)("iv");
        return _this;
    }
    return _ItemVersion;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._ItemVersion = _ItemVersion;
exports.ItemVersion = (0, sharepointqueryable_js_1.spInvokableFactory)(_ItemVersion);
/**
 * Provides paging functionality for list items
 */
var PagedItemCollection = /** @class */ (function () {
    function PagedItemCollection(parent, nextUrl, results) {
        this.parent = parent;
        this.nextUrl = nextUrl;
        this.results = results;
    }
    Object.defineProperty(PagedItemCollection.prototype, "hasNext", {
        /**
         * If true there are more results available in the set, otherwise there are not
         */
        get: function () {
            return typeof this.nextUrl === "string" && this.nextUrl.length > 0;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets the next set of results, or resolves to null if no results are available
     */
    PagedItemCollection.prototype.getNext = function () {
        if (this.hasNext) {
            var items = telemetry_js_1.tag.configure((0, exports.Items)(this.nextUrl, null).configureFrom(this.parent), "ip.getNext");
            return items.getPaged();
        }
        return new Promise(function (r) { return r(null); });
    };
    return PagedItemCollection;
}());
exports.PagedItemCollection = PagedItemCollection;
var PagedItemCollectionParser = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(PagedItemCollectionParser, _super);
    function PagedItemCollectionParser(_parent) {
        var _this = _super.call(this) || this;
        _this._parent = _parent;
        return _this;
    }
    PagedItemCollectionParser.prototype.parse = function (r) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.handleError(r, reject)) {
                r.json().then(function (json) {
                    var nextUrl = (0, common_1.hOP)(json, "d") && (0, common_1.hOP)(json.d, "__next") ? json.d.__next : json["odata.nextLink"];
                    resolve(new PagedItemCollection(_this._parent, nextUrl, _this.parseODataJSON(json)));
                });
            }
        });
    };
    return PagedItemCollectionParser;
}(odata_1.ODataParser));
var ItemUpdatedParser = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(ItemUpdatedParser, _super);
    function ItemUpdatedParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ItemUpdatedParser.prototype.parse = function (r) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.handleError(r, reject)) {
                resolve({
                    "odata.etag": r.headers.get("etag"),
                });
            }
        });
    };
    return ItemUpdatedParser;
}(odata_1.ODataParser));
//# sourceMappingURL=types.js.map