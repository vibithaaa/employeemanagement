"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Relation = exports._Relation = exports.Relations = exports._Relations = exports.Term = exports._Term = exports.Terms = exports._Terms = exports.Children = exports._Children = exports.TermSet = exports._TermSet = exports.TermSets = exports._TermSets = exports.TermGroup = exports._TermGroup = exports.TermGroups = exports._TermGroups = exports.TermStore = exports._TermStore = void 0;
var tslib_1 = require("tslib");
var common_1 = require("@pnp/common-commonjs");
var decorators_js_1 = require("../decorators.js");
var sharepointqueryable_js_1 = require("../sharepointqueryable.js");
var telemetry_js_1 = require("../telemetry.js");
/**
 * Describes a collection of Form objects
 *
 */
var _TermStore = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_TermStore, _super);
    function _TermStore() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_TermStore.prototype, "groups", {
        /**
         * Gets the term groups associated with this tenant
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.TermGroups)(this), "txts.groups");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_TermStore.prototype, "sets", {
        /**
         * Gets the term groups associated with this tenant
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.TermSets)(this), "txts.sets");
        },
        enumerable: false,
        configurable: true
    });
    _TermStore = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("_api/v2.1/termstore")
    ], _TermStore);
    return _TermStore;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._TermStore = _TermStore;
exports.TermStore = (0, sharepointqueryable_js_1.spInvokableFactory)(_TermStore);
var _TermGroups = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_TermGroups, _super);
    function _TermGroups() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a term group by id
     *
     * @param id Id of the term group to access
     */
    _TermGroups.prototype.getById = function (id) {
        return telemetry_js_1.tag.configure((0, exports.TermGroup)(this, id), "txtgs.getById");
    };
    _TermGroups = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("groups")
    ], _TermGroups);
    return _TermGroups;
}(sharepointqueryable_js_1._SharePointQueryableCollection));
exports._TermGroups = _TermGroups;
exports.TermGroups = (0, sharepointqueryable_js_1.spInvokableFactory)(_TermGroups);
var _TermGroup = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_TermGroup, _super);
    function _TermGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_TermGroup.prototype, "sets", {
        /**
         * Gets the term sets associated with this tenant
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.TermSets)(this, "sets"), "txtg.sets");
        },
        enumerable: false,
        configurable: true
    });
    return _TermGroup;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._TermGroup = _TermGroup;
exports.TermGroup = (0, sharepointqueryable_js_1.spInvokableFactory)(_TermGroup);
var _TermSets = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_TermSets, _super);
    function _TermSets() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a term group by id
     *
     * @param id Id of the term group to access
     */
    _TermSets.prototype.getById = function (id) {
        return telemetry_js_1.tag.configure((0, exports.TermSet)(this, id), "txts.getById");
    };
    _TermSets = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("sets")
    ], _TermSets);
    return _TermSets;
}(sharepointqueryable_js_1._SharePointQueryableCollection));
exports._TermSets = _TermSets;
exports.TermSets = (0, sharepointqueryable_js_1.spInvokableFactory)(_TermSets);
var _TermSet = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_TermSet, _super);
    function _TermSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_TermSet.prototype, "terms", {
        /**
         * Gets all the terms in this set
         */
        get: function () {
            return (0, exports.Terms)(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_TermSet.prototype, "parentGroup", {
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.TermGroup)(this, "parentGroup"), "txts.parentGroup");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_TermSet.prototype, "children", {
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.Children)(this), "txts.children");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_TermSet.prototype, "relations", {
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.Relations)(this), "txts.relations");
        },
        enumerable: false,
        configurable: true
    });
    _TermSet.prototype.getTermById = function (id) {
        return telemetry_js_1.tag.configure(this.clone(exports.Term, "terms/" + id), "txts.getTermById");
    };
    /**
     * Gets all the terms in this termset in an ordered tree using the appropriate sort ordering
     * ** This is an expensive operation and you should strongly consider caching the results **
     *
     * @param props Optional set of properties controlling how the tree is retrieved.
     */
    _TermSet.prototype.getAllChildrenAsOrderedTree = function (props) {
        if (props === void 0) { props = {}; }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var selects, setInfo, tree, ensureOrder, visitor;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        selects = ["*", "customSortOrder"];
                        if (props.retrieveProperties) {
                            selects.push("properties", "localProperties");
                        }
                        return [4 /*yield*/, this.select.apply(this, (0, tslib_1.__spreadArray)([], (0, tslib_1.__read)(selects), false))()];
                    case 1:
                        setInfo = _a.sent();
                        tree = [];
                        ensureOrder = function (terms, sorts, setSorts) {
                            // handle no custom sort information present
                            if (!(0, common_1.isArray)(sorts) && !(0, common_1.isArray)(setSorts)) {
                                return terms;
                            }
                            var ordering = null;
                            if (sorts === null && setSorts.length > 0) {
                                ordering = (0, tslib_1.__spreadArray)([], (0, tslib_1.__read)(setSorts), false);
                            }
                            else {
                                var index = sorts.findIndex(function (v) { return v.setId === setInfo.id; });
                                if (index >= 0) {
                                    ordering = (0, tslib_1.__spreadArray)([], (0, tslib_1.__read)(sorts[index].order), false);
                                }
                            }
                            if (ordering !== null) {
                                var orderedChildren_1 = [];
                                ordering.forEach(function (o) {
                                    var found = terms.find(function (ch) { return o === ch.id; });
                                    if (found) {
                                        orderedChildren_1.push(found);
                                    }
                                });
                                // we have a case where if a set is ordered and a term is added to that set
                                // AND the ordering information hasn't been updated in the UI the new term will not have
                                // any associated ordering information. See #1547 which reported this. So here we
                                // append any terms remaining in "terms" not in "orderedChildren" to the end of "orderedChildren"
                                orderedChildren_1.push.apply(orderedChildren_1, (0, tslib_1.__spreadArray)([], (0, tslib_1.__read)(terms.filter(function (info) { return ordering.indexOf(info.id) < 0; })), false));
                                return orderedChildren_1;
                            }
                            return terms;
                        };
                        visitor = function (source, parent) { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
                            var children, i, child, orderedTerm;
                            var _a;
                            return (0, tslib_1.__generator)(this, function (_b) {
                                switch (_b.label) {
                                    case 0: return [4 /*yield*/, (_a = source.children).select.apply(_a, (0, tslib_1.__spreadArray)([], (0, tslib_1.__read)(selects), false))()];
                                    case 1:
                                        children = _b.sent();
                                        i = 0;
                                        _b.label = 2;
                                    case 2:
                                        if (!(i < children.length)) return [3 /*break*/, 6];
                                        child = children[i];
                                        orderedTerm = (0, tslib_1.__assign)({ children: [], defaultLabel: child.labels.find(function (l) { return l.isDefault; }).name }, child);
                                        if (!(child.childrenCount > 0)) return [3 /*break*/, 4];
                                        return [4 /*yield*/, visitor(this.getTermById(children[i].id), orderedTerm.children)];
                                    case 3:
                                        _b.sent();
                                        orderedTerm.children = ensureOrder(orderedTerm.children, child.customSortOrder);
                                        _b.label = 4;
                                    case 4:
                                        parent.push(orderedTerm);
                                        _b.label = 5;
                                    case 5:
                                        i++;
                                        return [3 /*break*/, 2];
                                    case 6: return [2 /*return*/];
                                }
                            });
                        }); };
                        return [4 /*yield*/, visitor(this, tree)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, ensureOrder(tree, null, setInfo.customSortOrder)];
                }
            });
        });
    };
    return _TermSet;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._TermSet = _TermSet;
exports.TermSet = (0, sharepointqueryable_js_1.spInvokableFactory)(_TermSet);
var _Children = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Children, _super);
    function _Children() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _Children = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("children")
    ], _Children);
    return _Children;
}(sharepointqueryable_js_1._SharePointQueryableCollection));
exports._Children = _Children;
exports.Children = (0, sharepointqueryable_js_1.spInvokableFactory)(_Children);
var _Terms = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Terms, _super);
    function _Terms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a term group by id
     *
     * @param id Id of the term group to access
     */
    _Terms.prototype.getById = function (id) {
        return (0, exports.Term)(this, id);
    };
    _Terms = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("terms")
    ], _Terms);
    return _Terms;
}(sharepointqueryable_js_1._SharePointQueryableCollection));
exports._Terms = _Terms;
exports.Terms = (0, sharepointqueryable_js_1.spInvokableFactory)(_Terms);
var _Term = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Term, _super);
    function _Term() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Term.prototype, "children", {
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.Children)(this), "txt.children");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Term.prototype, "relations", {
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.Relations)(this), "txt.relations");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Term.prototype, "set", {
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.TermSet)(this, "set"), "txt.set");
        },
        enumerable: false,
        configurable: true
    });
    return _Term;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._Term = _Term;
exports.Term = (0, sharepointqueryable_js_1.spInvokableFactory)(_Term);
var _Relations = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Relations, _super);
    function _Relations() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a term group by id
     *
     * @param id Id of the term group to access
     */
    _Relations.prototype.getById = function (id) {
        return telemetry_js_1.tag.configure((0, exports.Relation)(this, id), "txrs.getById");
    };
    _Relations = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("relations")
    ], _Relations);
    return _Relations;
}(sharepointqueryable_js_1._SharePointQueryableCollection));
exports._Relations = _Relations;
exports.Relations = (0, sharepointqueryable_js_1.spInvokableFactory)(_Relations);
var _Relation = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Relation, _super);
    function _Relation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Relation.prototype, "fromTerm", {
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.Term)(this, "fromTerm"), "txr.fromTerm");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Relation.prototype, "toTerm", {
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.Term)(this, "toTerm"), "txr.toTerm");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Relation.prototype, "set", {
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.TermSet)(this, "set"), "txr.set");
        },
        enumerable: false,
        configurable: true
    });
    return _Relation;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._Relation = _Relation;
exports.Relation = (0, sharepointqueryable_js_1.spInvokableFactory)(_Relation);
//# sourceMappingURL=types.js.map