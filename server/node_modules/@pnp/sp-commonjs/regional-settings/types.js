"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeZones = exports._TimeZones = exports.TimeZone = exports._TimeZone = exports.RegionalSettings = exports._RegionalSettings = void 0;
var tslib_1 = require("tslib");
var common_1 = require("@pnp/common-commonjs");
var sharepointqueryable_js_1 = require("../sharepointqueryable.js");
var decorators_js_1 = require("../decorators.js");
var odata_js_1 = require("../odata.js");
var operations_js_1 = require("../operations.js");
var telemetry_js_1 = require("../telemetry.js");
var _RegionalSettings = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_RegionalSettings, _super);
    function _RegionalSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_RegionalSettings.prototype, "installedLanguages", {
        /**
         * Gets the collection of languages used in a server farm.
         * ** Please use getInstalledLanguages instead of this method **
         */
        get: function () {
            console.warn("Deprecated: RegionalSettings.installedLanguages is deprecated, please use RegionalSettings.getInstalledLanguages");
            return telemetry_js_1.tag.configure((0, sharepointqueryable_js_1.SharePointQueryableCollection)(this, "installedlanguages"), "rs.installedLanguages");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_RegionalSettings.prototype, "timeZone", {
        /**
         * Gets time zone
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.TimeZone)(this), "rs.tz");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_RegionalSettings.prototype, "timeZones", {
        /**
         * Gets time zones
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.TimeZones)(this), "rs.tzs");
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets the collection of languages used in a server farm.
     */
    _RegionalSettings.prototype.getInstalledLanguages = function () {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var results;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, telemetry_js_1.tag.configure((0, sharepointqueryable_js_1.SharePointQueryableCollection)(this, "installedlanguages"), "rs.getInstalledLanguages")()];
                    case 1:
                        results = _a.sent();
                        return [2 /*return*/, results.Items];
                }
            });
        });
    };
    _RegionalSettings = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("regionalsettings")
    ], _RegionalSettings);
    return _RegionalSettings;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._RegionalSettings = _RegionalSettings;
exports.RegionalSettings = (0, sharepointqueryable_js_1.spInvokableFactory)(_RegionalSettings);
var _TimeZone = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_TimeZone, _super);
    function _TimeZone() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets an Local Time by UTC Time
     *
     * @param utcTime UTC Time as Date or ISO String
     */
    _TimeZone.prototype.utcToLocalTime = function (utcTime) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var dateIsoString, res;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof utcTime === "string") {
                            dateIsoString = utcTime;
                        }
                        else {
                            dateIsoString = utcTime.toISOString();
                        }
                        return [4 /*yield*/, (0, operations_js_1.spPost)(this.clone(exports.TimeZone, "utctolocaltime('" + dateIsoString + "')"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, (0, common_1.hOP)(res, "UTCToLocalTime") ? res.UTCToLocalTime : res];
                }
            });
        });
    };
    /**
     * Gets an UTC Time by Local Time
     *
     * @param localTime Local Time as Date or ISO String
     */
    _TimeZone.prototype.localTimeToUTC = function (localTime) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var dateIsoString, res;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof localTime === "string") {
                            dateIsoString = localTime;
                        }
                        else {
                            dateIsoString = (0, common_1.dateAdd)(localTime, "minute", localTime.getTimezoneOffset() * -1).toISOString();
                        }
                        return [4 /*yield*/, (0, operations_js_1.spPost)(this.clone(exports.TimeZone, "localtimetoutc('" + dateIsoString + "')"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, (0, common_1.hOP)(res, "LocalTimeToUTC") ? res.LocalTimeToUTC : res];
                }
            });
        });
    };
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("tz.utcToLocalTime")
    ], _TimeZone.prototype, "utcToLocalTime", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("tz.localTimeToUTC")
    ], _TimeZone.prototype, "localTimeToUTC", null);
    _TimeZone = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("timezone")
    ], _TimeZone);
    return _TimeZone;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._TimeZone = _TimeZone;
exports.TimeZone = (0, sharepointqueryable_js_1.spInvokableFactory)(_TimeZone);
var _TimeZones = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_TimeZones, _super);
    function _TimeZones() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets an TimeZone by id (see: https://msdn.microsoft.com/en-us/library/office/jj247008.aspx)
     *
     * @param id The integer id of the timezone to retrieve
     */
    _TimeZones.prototype.getById = function (id) {
        // do the post and merge the result into a TimeZone instance so the data and methods are available
        return (0, operations_js_1.spPost)(this.clone(exports.TimeZones, "GetById(" + id + ")").usingParser((0, odata_js_1.spODataEntity)(exports.TimeZone)));
    };
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("tzs.getById")
    ], _TimeZones.prototype, "getById", null);
    _TimeZones = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("timezones")
    ], _TimeZones);
    return _TimeZones;
}(sharepointqueryable_js_1._SharePointQueryableCollection));
exports._TimeZones = _TimeZones;
exports.TimeZones = (0, sharepointqueryable_js_1.spInvokableFactory)(_TimeZones);
//# sourceMappingURL=types.js.map