"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscription = exports._Subscription = exports.Subscriptions = exports._Subscriptions = void 0;
var tslib_1 = require("tslib");
var sharepointqueryable_js_1 = require("../sharepointqueryable.js");
var odata_1 = require("@pnp/odata-commonjs");
var decorators_js_1 = require("../decorators.js");
var operations_js_1 = require("../operations.js");
var telemetry_js_1 = require("../telemetry.js");
var _Subscriptions = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Subscriptions, _super);
    function _Subscriptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
    * Returns all the webhook subscriptions or the specified webhook subscription
    *
    * @param subscriptionId The id of a specific webhook subscription to retrieve, omit to retrieve all the webhook subscriptions
    */
    _Subscriptions.prototype.getById = function (subscriptionId) {
        return telemetry_js_1.tag.configure((0, exports.Subscription)(this).concat("('" + subscriptionId + "')"), "subs.getById");
    };
    /**
     * Creates a new webhook subscription
     *
     * @param notificationUrl The url to receive the notifications
     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)
     * @param clientState A client specific string (optional)
     */
    _Subscriptions.prototype.add = function (notificationUrl, expirationDate, clientState) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var postBody, data;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = {
                            "expirationDateTime": expirationDate,
                            "notificationUrl": notificationUrl,
                            "resource": this.toUrl(),
                        };
                        if (clientState) {
                            postBody.clientState = clientState;
                        }
                        return [4 /*yield*/, (0, operations_js_1.spPost)(this, (0, odata_1.body)(postBody, (0, odata_1.headers)({ "Content-Type": "application/json" })))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, { data: data, subscription: this.getById(data.id) }];
                }
            });
        });
    };
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("subs.add")
    ], _Subscriptions.prototype, "add", null);
    _Subscriptions = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("subscriptions")
    ], _Subscriptions);
    return _Subscriptions;
}(sharepointqueryable_js_1._SharePointQueryableCollection));
exports._Subscriptions = _Subscriptions;
exports.Subscriptions = (0, sharepointqueryable_js_1.spInvokableFactory)(_Subscriptions);
var _Subscription = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Subscription, _super);
    function _Subscription() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Renews this webhook subscription
     *
     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months, optional)
     * @param notificationUrl The url to receive the notifications (optional)
     * @param clientState A client specific string (optional)
     */
    _Subscription.prototype.update = function (expirationDate, notificationUrl, clientState) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var postBody, data;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = {};
                        if (expirationDate) {
                            postBody.expirationDateTime = expirationDate;
                        }
                        if (notificationUrl) {
                            postBody.notificationUrl = notificationUrl;
                        }
                        if (clientState) {
                            postBody.clientState = clientState;
                        }
                        return [4 /*yield*/, (0, operations_js_1.spPatch)(this, (0, odata_1.body)(postBody, (0, odata_1.headers)({ "Content-Type": "application/json" })))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, { data: data, subscription: this }];
                }
            });
        });
    };
    /**
     * Removes this webhook subscription
     *
     */
    _Subscription.prototype.delete = function () {
        return (0, operations_js_1.spDelete)(this);
    };
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("sub.update")
    ], _Subscription.prototype, "update", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("sub.delete")
    ], _Subscription.prototype, "delete", null);
    return _Subscription;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._Subscription = _Subscription;
exports.Subscription = (0, sharepointqueryable_js_1.spInvokableFactory)(_Subscription);
//# sourceMappingURL=types.js.map