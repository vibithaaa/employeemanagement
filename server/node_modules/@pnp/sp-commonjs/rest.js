"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sp = exports.SPRest = void 0;
var tslib_1 = require("tslib");
var common_1 = require("@pnp/common-commonjs");
var splibconfig_js_1 = require("./splibconfig.js");
/**
 * Root of the SharePoint REST module
 */
var SPRest = /** @class */ (function () {
    /**
     * Creates a new instance of the SPRest class
     *
     * @param options Additional options
     * @param baseUrl A string that should form the base part of the url
     */
    function SPRest(_options, _baseUrl, _runtime) {
        if (_options === void 0) { _options = {}; }
        if (_baseUrl === void 0) { _baseUrl = ""; }
        if (_runtime === void 0) { _runtime = common_1.DefaultRuntime; }
        this._options = _options;
        this._baseUrl = _baseUrl;
        this._runtime = _runtime;
    }
    /**
     * Configures instance with additional options and baseUrl.
     * Provided configuration used by other objects in a chain
     *
     * @param options Additional options
     * @param baseUrl A string that should form the base part of the url
     */
    SPRest.prototype.configure = function (options, baseUrl) {
        if (baseUrl === void 0) { baseUrl = ""; }
        return new SPRest(options, baseUrl);
    };
    /**
     * Global SharePoint configuration options
     *
     * @param config The SharePoint configuration to apply
     */
    SPRest.prototype.setup = function (config) {
        if (config.pageContext) {
            (0, splibconfig_js_1.setup)({
                spfxContext: config,
            }, this._runtime);
        }
        else {
            (0, splibconfig_js_1.setup)(config, this._runtime);
        }
    };
    SPRest.prototype.createIsolated = function (init) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var baseUrl, cloneGlobal, options, config, runtime;
            return (0, tslib_1.__generator)(this, function (_a) {
                // merge our defaults
                init = Object.assign({
                    baseUrl: "",
                    cloneGlobal: true,
                    config: {},
                    options: {},
                }, init || {});
                baseUrl = init.baseUrl, cloneGlobal = init.cloneGlobal, options = init.options, config = init.config;
                runtime = cloneGlobal ? new common_1.Runtime(common_1.DefaultRuntime.export()) : new common_1.Runtime();
                runtime.assign(config);
                return [2 /*return*/, new SPRest(options, baseUrl, runtime)];
            });
        });
    };
    SPRest.prototype.childConfigHook = function (callback) {
        return callback({ options: this._options, baseUrl: this._baseUrl, runtime: this._runtime });
    };
    return SPRest;
}());
exports.SPRest = SPRest;
exports.sp = new SPRest();
//# sourceMappingURL=rest.js.map