"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.spODataEntityArray = exports.spODataEntity = exports.odataUrlFrom = void 0;
var tslib_1 = require("tslib");
var common_1 = require("@pnp/common-commonjs");
var logging_1 = require("@pnp/logging-commonjs");
var odata_1 = require("@pnp/odata-commonjs");
var extractweburl_js_1 = require("./utils/extractweburl.js");
function odataUrlFrom(candidate) {
    var parts = [];
    var s = ["odata.type", "odata.editLink", "__metadata", "odata.metadata", "odata.id"];
    if ((0, common_1.hOP)(candidate, s[0]) && candidate[s[0]] === "SP.Web") {
        // webs return an absolute url in the id
        if ((0, common_1.hOP)(candidate, s[4])) {
            parts.push(candidate[s[4]]);
        }
        else if ((0, common_1.hOP)(candidate, s[2])) {
            // we are dealing with verbose, which has an absolute uri
            parts.push(candidate.__metadata.uri);
        }
    }
    else {
        if ((0, common_1.hOP)(candidate, s[3]) && (0, common_1.hOP)(candidate, s[1])) {
            // we are dealign with minimal metadata (default)
            // some entities return an abosolute url in the editlink while for others it is relative
            // without the _api. This code is meant to handle both situations
            var editLink = (0, common_1.isUrlAbsolute)(candidate[s[1]]) ? candidate[s[1]].split("_api")[1] : candidate[s[1]];
            parts.push((0, extractweburl_js_1.extractWebUrl)(candidate[s[3]]), "_api", editLink);
        }
        else if ((0, common_1.hOP)(candidate, s[1])) {
            parts.push("_api", candidate[s[1]]);
        }
        else if ((0, common_1.hOP)(candidate, s[2])) {
            // we are dealing with verbose, which has an absolute uri
            parts.push(candidate.__metadata.uri);
        }
    }
    if (parts.length < 1) {
        logging_1.Logger.write("No uri information found in ODataEntity parsing, chaining will fail for this object.", 2 /* Warning */);
        return "";
    }
    return common_1.combine.apply(void 0, (0, tslib_1.__spreadArray)([], (0, tslib_1.__read)(parts), false));
}
exports.odataUrlFrom = odataUrlFrom;
var SPODataEntityParserImpl = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(SPODataEntityParserImpl, _super);
    function SPODataEntityParserImpl(factory) {
        var _this = _super.call(this) || this;
        _this.factory = factory;
        _this.hydrate = function (d) {
            var o = _this.factory(odataUrlFrom(d), null);
            return (0, common_1.assign)(o, d);
        };
        return _this;
    }
    SPODataEntityParserImpl.prototype.parse = function (r) {
        var _this = this;
        return _super.prototype.parse.call(this, r).then(function (d) {
            var o = _this.factory(odataUrlFrom(d), null);
            return (0, common_1.assign)(o, d);
        });
    };
    return SPODataEntityParserImpl;
}(odata_1.ODataParser));
var SPODataEntityArrayParserImpl = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(SPODataEntityArrayParserImpl, _super);
    function SPODataEntityArrayParserImpl(factory) {
        var _this = _super.call(this) || this;
        _this.factory = factory;
        _this.hydrate = function (d) {
            return d.map(function (v) {
                var o = _this.factory(odataUrlFrom(v), null);
                return (0, common_1.assign)(o, v);
            });
        };
        return _this;
    }
    SPODataEntityArrayParserImpl.prototype.parse = function (r) {
        var _this = this;
        return _super.prototype.parse.call(this, r).then(function (d) {
            return d.map(function (v) {
                var o = _this.factory(odataUrlFrom(v), null);
                return (0, common_1.assign)(o, v);
            });
        });
    };
    return SPODataEntityArrayParserImpl;
}(odata_1.ODataParser));
function spODataEntity(factory) {
    return new SPODataEntityParserImpl(factory);
}
exports.spODataEntity = spODataEntity;
function spODataEntityArray(factory) {
    return new SPODataEntityArrayParserImpl(factory);
}
exports.spODataEntityArray = spODataEntityArray;
//# sourceMappingURL=odata.js.map