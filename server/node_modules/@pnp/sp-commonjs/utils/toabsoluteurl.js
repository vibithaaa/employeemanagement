"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toAbsoluteUrl = void 0;
var tslib_1 = require("tslib");
var common_1 = require("@pnp/common-commonjs");
/**
 * Ensures that a given url is absolute for the current web based on context
 *
 * @param candidateUrl The url to make absolute
 *
 */
function toAbsoluteUrl(candidateUrl, runtime) {
    var _a, _b;
    if (runtime === void 0) { runtime = common_1.DefaultRuntime; }
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var baseUrl, fetchClientFactory, context, tempClient, location_1;
        return (0, tslib_1.__generator)(this, function (_c) {
            if ((0, common_1.isUrlAbsolute)(candidateUrl)) {
                // if we are already absolute, then just return the url
                return [2 /*return*/, candidateUrl];
            }
            baseUrl = (_a = runtime.get("sp")) === null || _a === void 0 ? void 0 : _a.baseUrl;
            fetchClientFactory = (_b = runtime.get("sp")) === null || _b === void 0 ? void 0 : _b.fetchClientFactory;
            if (!(0, common_1.stringIsNullOrEmpty)(baseUrl)) {
                // base url specified either with baseUrl of spfxContext config property
                return [2 /*return*/, (0, common_1.combine)(baseUrl, candidateUrl)];
            }
            context = runtime.get("spfxContext");
            if (context) {
                return [2 /*return*/, (0, common_1.combine)(context.pageContext.web.absoluteUrl, candidateUrl)];
            }
            // to make the existing node client work in a backwards compatible way we do the following (hacky thing)
            // get the client
            // see if it has a siteUrl property
            // use that to absolute the url
            if (fetchClientFactory) {
                tempClient = fetchClientFactory();
                if ((0, common_1.hOP)(tempClient, "siteUrl")) {
                    return [2 /*return*/, (0, common_1.combine)(tempClient.siteUrl, candidateUrl)];
                }
            }
            if (common_1.safeGlobal._spPageContextInfo !== undefined) {
                // operating in classic pages
                if ((0, common_1.hOP)(common_1.safeGlobal._spPageContextInfo, "webAbsoluteUrl")) {
                    return [2 /*return*/, (0, common_1.combine)(common_1.safeGlobal._spPageContextInfo.webAbsoluteUrl, candidateUrl)];
                }
                else if ((0, common_1.hOP)(common_1.safeGlobal._spPageContextInfo, "webServerRelativeUrl")) {
                    return [2 /*return*/, (0, common_1.combine)(common_1.safeGlobal._spPageContextInfo.webServerRelativeUrl, candidateUrl)];
                }
            }
            // does window.location exist and have a certain path part in it?
            if (common_1.safeGlobal.location !== undefined) {
                location_1 = common_1.safeGlobal.location.toString().toLowerCase();
                ["/_layouts/", "/siteassets/", "/sitepages/"].forEach(function (s) {
                    var index = location_1.indexOf(s);
                    if (index > 0) {
                        return (0, common_1.combine)(location_1.substr(0, index), candidateUrl);
                    }
                });
            }
            return [2 /*return*/, candidateUrl];
        });
    });
}
exports.toAbsoluteUrl = toAbsoluteUrl;
//# sourceMappingURL=toabsoluteurl.js.map