"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldLink = exports._FieldLink = exports.FieldLinks = exports._FieldLinks = exports.ContentType = exports._ContentType = exports.ContentTypes = exports._ContentTypes = void 0;
var tslib_1 = require("tslib");
var odata_1 = require("@pnp/odata-commonjs");
var sharepointqueryable_js_1 = require("../sharepointqueryable.js");
var decorators_js_1 = require("../decorators.js");
var metadata_js_1 = require("../utils/metadata.js");
var operations_js_1 = require("../operations.js");
var telemetry_js_1 = require("../telemetry.js");
var _ContentTypes = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_ContentTypes, _super);
    function _ContentTypes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds an existing contenttype to a content type collection
     *
     * @param contentTypeId in the following format, for example: 0x010102
     */
    _ContentTypes.prototype.addAvailableContentType = function (contentTypeId) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var data;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, operations_js_1.spPost)(this.clone(exports.ContentTypes, "addAvailableContentType"), (0, odata_1.body)({ "contentTypeId": contentTypeId }))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                contentType: this.getById(data.id),
                                data: data,
                            }];
                }
            });
        });
    };
    /**
     * Gets a ContentType by content type id
     * @param id The id of the content type to get, in the following format, for example: 0x010102
     */
    _ContentTypes.prototype.getById = function (id) {
        return telemetry_js_1.tag.configure((0, exports.ContentType)(this).concat("('" + id + "')"), "cts.getById");
    };
    /**
     * Adds a new content type to the collection
     *
     * @param id The desired content type id for the new content type (also determines the parent content type)
     * @param name The name of the content type
     * @param description The description of the content type
     * @param group The group in which to add the content type
     * @param additionalSettings Any additional settings to provide when creating the content type
     *
     */
    _ContentTypes.prototype.add = function (id, name, description, group, additionalSettings) {
        if (description === void 0) { description = ""; }
        if (group === void 0) { group = "Custom Content Types"; }
        if (additionalSettings === void 0) { additionalSettings = {}; }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var postBody, data;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = (0, odata_1.body)(Object.assign((0, metadata_js_1.metadata)("SP.ContentType"), {
                            "Description": description,
                            "Group": group,
                            "Id": { "StringValue": id },
                            "Name": name,
                        }, additionalSettings));
                        return [4 /*yield*/, (0, operations_js_1.spPost)(this, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, { contentType: this.getById(data.id), data: data }];
                }
            });
        });
    };
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("cts.addAvailableContentType")
    ], _ContentTypes.prototype, "addAvailableContentType", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("cts.add")
    ], _ContentTypes.prototype, "add", null);
    _ContentTypes = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("contenttypes")
    ], _ContentTypes);
    return _ContentTypes;
}(sharepointqueryable_js_1._SharePointQueryableCollection));
exports._ContentTypes = _ContentTypes;
exports.ContentTypes = (0, sharepointqueryable_js_1.spInvokableFactory)(_ContentTypes);
var _ContentType = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_ContentType, _super);
    function _ContentType() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.delete = (0, sharepointqueryable_js_1.deleteable)("ct");
        return _this;
    }
    Object.defineProperty(_ContentType.prototype, "fieldLinks", {
        /**
         * Gets the column (also known as field) references in the content type.
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.FieldLinks)(this), "ct.fieldLinks");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_ContentType.prototype, "fields", {
        /**
         * Gets a value that specifies the collection of fields for the content type.
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, sharepointqueryable_js_1.SharePointQueryableCollection)(this, "fields"), "ct.fields");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_ContentType.prototype, "parent", {
        /**
         * Gets the parent content type of the content type.
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, exports.ContentType)(this, "parent"), "ct.parent");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_ContentType.prototype, "workflowAssociations", {
        /**
         * Gets a value that specifies the collection of workflow associations for the content type.
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, sharepointqueryable_js_1.SharePointQueryableCollection)(this, "workflowAssociations"), "ct.workflowAssociations");
        },
        enumerable: false,
        configurable: true
    });
    return _ContentType;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._ContentType = _ContentType;
exports.ContentType = (0, sharepointqueryable_js_1.spInvokableFactory)(_ContentType);
var _FieldLinks = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_FieldLinks, _super);
    function _FieldLinks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
    *  Gets a FieldLink by GUID id
    *
    * @param id The GUID id of the field link
    */
    _FieldLinks.prototype.getById = function (id) {
        return telemetry_js_1.tag.configure((0, exports.FieldLink)(this).concat("(guid'" + id + "')"), "fls.getById");
    };
    _FieldLinks = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("fieldlinks")
    ], _FieldLinks);
    return _FieldLinks;
}(sharepointqueryable_js_1._SharePointQueryableCollection));
exports._FieldLinks = _FieldLinks;
exports.FieldLinks = (0, sharepointqueryable_js_1.spInvokableFactory)(_FieldLinks);
var _FieldLink = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_FieldLink, _super);
    function _FieldLink() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return _FieldLink;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._FieldLink = _FieldLink;
exports.FieldLink = (0, sharepointqueryable_js_1.spInvokableFactory)(_FieldLink);
//# sourceMappingURL=types.js.map