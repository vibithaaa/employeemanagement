"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web = exports._Web = exports.Webs = exports._Webs = void 0;
var tslib_1 = require("tslib");
var common_1 = require("@pnp/common-commonjs");
var odata_1 = require("@pnp/odata-commonjs");
var sharepointqueryable_js_1 = require("../sharepointqueryable.js");
var decorators_js_1 = require("../decorators.js");
var odata_js_1 = require("../odata.js");
var batch_js_1 = require("../batch.js");
var metadata_js_1 = require("../utils/metadata.js");
var index_js_1 = require("../sites/index.js");
var operations_js_1 = require("../operations.js");
var escapeQueryStrValue_js_1 = require("../utils/escapeQueryStrValue.js");
var telemetry_js_1 = require("../telemetry.js");
var _Webs = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Webs, _super);
    function _Webs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a new web to the collection
     *
     * @param title The new web's title
     * @param url The new web's relative url
     * @param description The new web's description
     * @param template The new web's template internal name (default = STS)
     * @param language The locale id that specifies the new web's language (default = 1033 [English, US])
     * @param inheritPermissions When true, permissions will be inherited from the new web's parent (default = true)
     */
    _Webs.prototype.add = function (title, url, description, template, language, inheritPermissions) {
        if (description === void 0) { description = ""; }
        if (template === void 0) { template = "STS"; }
        if (language === void 0) { language = 1033; }
        if (inheritPermissions === void 0) { inheritPermissions = true; }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var postBody, data;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = (0, odata_1.body)({
                            "parameters": (0, common_1.assign)((0, metadata_js_1.metadata)("SP.WebCreationInformation"), {
                                Description: description,
                                Language: language,
                                Title: title,
                                Url: url,
                                UseSamePermissionsAsParentSite: inheritPermissions,
                                WebTemplate: template,
                            }),
                        });
                        return [4 /*yield*/, (0, operations_js_1.spPost)(this.clone(exports.Webs, "add"), postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                web: (0, exports.Web)((0, odata_js_1.odataUrlFrom)(data).replace(/_api\/web\/?/i, "")).configureFrom(this),
                            }];
                }
            });
        });
    };
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("ws.add")
    ], _Webs.prototype, "add", null);
    _Webs = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("webs")
    ], _Webs);
    return _Webs;
}(sharepointqueryable_js_1._SharePointQueryableCollection));
exports._Webs = _Webs;
exports.Webs = (0, sharepointqueryable_js_1.spInvokableFactory)(_Webs);
/**
 * Describes a web
 *
 */
var _Web = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(_Web, _super);
    function _Web() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.delete = (0, sharepointqueryable_js_1.deleteable)("w");
        return _this;
    }
    Object.defineProperty(_Web.prototype, "webs", {
        /**
         * Gets this web's subwebs
         *
         */
        get: function () {
            return (0, exports.Webs)(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Web.prototype, "allProperties", {
        /**
         * Allows access to the web's all properties collection
         */
        get: function () {
            return telemetry_js_1.tag.configure(this.clone(sharepointqueryable_js_1.SharePointQueryableInstance, "allproperties"), "w.allprops");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Web.prototype, "webinfos", {
        /**
         * Gets a collection of WebInfos for this web's subwebs
         *
         */
        get: function () {
            return telemetry_js_1.tag.configure((0, sharepointqueryable_js_1.SharePointQueryableCollection)(this, "webinfos"), "w.webinfos");
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets this web's parent web and data
     *
     */
    _Web.prototype.getParentWeb = function () {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var ParentWeb;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, operations_js_1.spGet)(this.select("ParentWeb/Id").expand("ParentWeb"))];
                    case 1:
                        ParentWeb = (_a.sent()).ParentWeb;
                        return [2 /*return*/, (ParentWeb === null || ParentWeb === void 0 ? void 0 : ParentWeb.Id) ? (0, index_js_1.Site)(this.parentUrl).openWebById(ParentWeb.Id) : null];
                }
            });
        });
    };
    /**
     * Updates this web instance with the supplied properties
     *
     * @param properties A plain object hash of values to update for the web
     */
    _Web.prototype.update = function (properties) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var postBody, data;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = (0, odata_1.body)((0, common_1.assign)((0, metadata_js_1.metadata)("SP.Web"), properties), (0, odata_1.headers)({ "X-HTTP-Method": "MERGE" }));
                        return [4 /*yield*/, (0, operations_js_1.spPost)(this, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, { data: data, web: this }];
                }
            });
        });
    };
    /**
     * Applies the theme specified by the contents of each of the files specified in the arguments to the site
     *
     * @param colorPaletteUrl The server-relative URL of the color palette file
     * @param fontSchemeUrl The server-relative URL of the font scheme
     * @param backgroundImageUrl The server-relative URL of the background image
     * @param shareGenerated When true, the generated theme files are stored in the root site. When false, they are stored in this web
     */
    _Web.prototype.applyTheme = function (colorPaletteUrl, fontSchemeUrl, backgroundImageUrl, shareGenerated) {
        var postBody = (0, odata_1.body)({
            backgroundImageUrl: backgroundImageUrl,
            colorPaletteUrl: colorPaletteUrl,
            fontSchemeUrl: fontSchemeUrl,
            shareGenerated: shareGenerated,
        });
        return (0, operations_js_1.spPost)(this.clone(exports.Web, "applytheme"), postBody);
    };
    /**
     * Applies the specified site definition or site template to the Web site that has no template applied to it
     *
     * @param template Name of the site definition or the name of the site template
     */
    _Web.prototype.applyWebTemplate = function (template) {
        var q = this.clone(exports.Web, "applywebtemplate");
        q.concat("(webTemplate='" + (0, escapeQueryStrValue_js_1.escapeQueryStrValue)(template) + "')");
        return (0, operations_js_1.spPost)(q);
    };
    /**
         * Returns the collection of changes from the change log that have occurred within the list, based on the specified query
         *
         * @param query The change query
         */
    _Web.prototype.getChanges = function (query) {
        var postBody = (0, odata_1.body)({ "query": (0, common_1.assign)((0, metadata_js_1.metadata)("SP.ChangeQuery"), query) });
        return (0, operations_js_1.spPost)(this.clone(exports.Web, "getchanges"), postBody);
    };
    /**
     * Returns the name of the image file for the icon that is used to represent the specified file
     *
     * @param filename The file name. If this parameter is empty, the server returns an empty string
     * @param size The size of the icon: 16x16 pixels = 0, 32x32 pixels = 1 (default = 0)
     * @param progId The ProgID of the application that was used to create the file, in the form OLEServerName.ObjectName
     */
    _Web.prototype.mapToIcon = function (filename, size, progId) {
        if (size === void 0) { size = 0; }
        if (progId === void 0) { progId = ""; }
        return (0, operations_js_1.spGet)(this.clone(exports.Web, "maptoicon(filename='" + (0, escapeQueryStrValue_js_1.escapeQueryStrValue)(filename) + "', progid='" + (0, escapeQueryStrValue_js_1.escapeQueryStrValue)(progId) + "', size=" + size + ")"));
    };
    /**
     * Returns the tenant property corresponding to the specified key in the app catalog site
     *
     * @param key Id of storage entity to be set
     */
    _Web.prototype.getStorageEntity = function (key) {
        return (0, operations_js_1.spGet)(this.clone(exports.Web, "getStorageEntity('" + (0, escapeQueryStrValue_js_1.escapeQueryStrValue)(key) + "')"));
    };
    /**
     * This will set the storage entity identified by the given key (MUST be called in the context of the app catalog)
     *
     * @param key Id of storage entity to be set
     * @param value Value of storage entity to be set
     * @param description Description of storage entity to be set
     * @param comments Comments of storage entity to be set
     */
    _Web.prototype.setStorageEntity = function (key, value, description, comments) {
        if (description === void 0) { description = ""; }
        if (comments === void 0) { comments = ""; }
        return (0, operations_js_1.spPost)(this.clone(exports.Web, "setStorageEntity"), (0, odata_1.body)({
            comments: comments,
            description: description,
            key: key,
            value: value,
        }));
    };
    /**
     * This will remove the storage entity identified by the given key
     *
     * @param key Id of storage entity to be removed
     */
    _Web.prototype.removeStorageEntity = function (key) {
        return (0, operations_js_1.spPost)(this.clone(exports.Web, "removeStorageEntity('" + (0, escapeQueryStrValue_js_1.escapeQueryStrValue)(key) + "')"));
    };
    /**
    * Returns a collection of objects that contain metadata about subsites of the current site in which the current user is a member.
    *
    * @param nWebTemplateFilter Specifies the site definition (default = -1)
    * @param nConfigurationFilter A 16-bit integer that specifies the identifier of a configuration (default = -1)
    */
    _Web.prototype.getSubwebsFilteredForCurrentUser = function (nWebTemplateFilter, nConfigurationFilter) {
        if (nWebTemplateFilter === void 0) { nWebTemplateFilter = -1; }
        if (nConfigurationFilter === void 0) { nConfigurationFilter = -1; }
        var o = this.clone(sharepointqueryable_js_1.SharePointQueryableCollection, "getSubwebsFilteredForCurrentUser(nWebTemplateFilter=" + nWebTemplateFilter + ",nConfigurationFilter=" + nConfigurationFilter + ")");
        return telemetry_js_1.tag.configure(o, "w.getSubwebsFilteredForCurrentUser");
    };
    /**
     * Creates a new batch for requests within the context of this web
     *
     */
    _Web.prototype.createBatch = function () {
        return new batch_js_1.SPBatch(this.parentUrl, this.getRuntime());
    };
    /**
     * Returns a collection of site templates available for the site
     *
     * @param language The locale id of the site templates to retrieve (default = 1033 [English, US])
     * @param includeCrossLanguage When true, includes language-neutral site templates; otherwise false (default = true)
     */
    _Web.prototype.availableWebTemplates = function (language, includeCrossLanugage) {
        if (language === void 0) { language = 1033; }
        if (includeCrossLanugage === void 0) { includeCrossLanugage = true; }
        var path = "getavailablewebtemplates(lcid=" + language + ", doincludecrosslanguage=" + includeCrossLanugage + ")";
        return telemetry_js_1.tag.configure((0, sharepointqueryable_js_1.SharePointQueryableCollection)(this, path), "w.availableWebTemplates");
    };
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("w.getParentWeb")
    ], _Web.prototype, "getParentWeb", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("w.update")
    ], _Web.prototype, "update", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("w.applyTheme")
    ], _Web.prototype, "applyTheme", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("w.applyWebTemplate")
    ], _Web.prototype, "applyWebTemplate", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("w.getChanges")
    ], _Web.prototype, "getChanges", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("w.mapToIcon")
    ], _Web.prototype, "mapToIcon", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("w.getStorageEntity")
    ], _Web.prototype, "getStorageEntity", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("w.setStorageEntity")
    ], _Web.prototype, "setStorageEntity", null);
    (0, tslib_1.__decorate)([
        (0, telemetry_js_1.tag)("w.removeStorageEntity")
    ], _Web.prototype, "removeStorageEntity", null);
    _Web = (0, tslib_1.__decorate)([
        (0, decorators_js_1.defaultPath)("_api/web")
    ], _Web);
    return _Web;
}(sharepointqueryable_js_1._SharePointQueryableInstance));
exports._Web = _Web;
exports.Web = (0, sharepointqueryable_js_1.spInvokableFactory)(_Web);
//# sourceMappingURL=types.js.map