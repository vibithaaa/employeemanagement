"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdalCertificateFetchClient = void 0;
var tslib_1 = require("tslib");
var adal_node_1 = require("adal-node");
var common_1 = require("@pnp/common-commonjs");
var nodefetchclient_js_1 = require("./nodefetchclient.js");
/**
 *
 * Creates a fetch client that will aquire an access token using the client credentials
 * flow with a certificate as the credentials.  Used for app only or server-to-server api
 * requests.
 *
 * See https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-oauth2-client-creds-grant-flow#service-to-service-access-token-request
 */
var AdalCertificateFetchClient = /** @class */ (function () {
    /**
     *
     * @param _tenant - Azure AD tenant id (guid)
     * @param _clientId - Client Id from Azure AD app registration
     * @param _thumbprint - Thumbprint of the client certificate
     * @param _privateKey - The private key for the client certificate used to sign requests
     * @param _resource - The resource the application is requesting access to i.e. https://graph.microsoft.com, https://<tenant>.sharepoint.com, etc
     * @param _authority - OAuth 2 authority.  Defaults to https://login.windows.net as is the authority in most cases
     * @param _fetchClient - The fetch client implementation to use when making HTTP request.  Defautls to NodeFetchClient to provide transient retries.
     */
    function AdalCertificateFetchClient(_tenant, _clientId, _thumbprint, _privateKey, _resource, _authority, _fetchClient) {
        if (_resource === void 0) { _resource = "https://graph.microsoft.com"; }
        if (_authority === void 0) { _authority = "https://login.windows.net"; }
        if (_fetchClient === void 0) { _fetchClient = new nodefetchclient_js_1.NodeFetchClient(); }
        this._tenant = _tenant;
        this._clientId = _clientId;
        this._thumbprint = _thumbprint;
        this._privateKey = _privateKey;
        this._resource = _resource;
        this._authority = _authority;
        this._fetchClient = _fetchClient;
        this._authContext = new adal_node_1.AuthenticationContext((0, common_1.combine)(this._authority, this._tenant));
    }
    AdalCertificateFetchClient.prototype.fetch = function (url, options) {
        if (options === void 0) { options = {}; }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var token;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(0, common_1.objectDefinedNotNull)(options)) {
                            options = {
                                headers: new Headers(),
                            };
                        }
                        else if (!(0, common_1.objectDefinedNotNull)(options.headers)) {
                            options = (0, common_1.assign)(options, {
                                headers: new Headers(),
                            });
                        }
                        if (!(0, common_1.isUrlAbsolute)(url)) {
                            url = (0, common_1.combine)(this._resource, url);
                        }
                        return [4 /*yield*/, this.acquireToken()];
                    case 1:
                        token = _a.sent();
                        options.headers.set("Authorization", token.tokenType + " " + token.accessToken);
                        return [4 /*yield*/, this._fetchClient.fetch(url, options)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    AdalCertificateFetchClient.prototype.acquireToken = function () {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this._authContext.acquireTokenWithClientCertificate(_this._resource, _this._clientId, _this._privateKey, _this._thumbprint, function (err, token) {
                            if (err) {
                                reject(err);
                                return;
                            }
                            if (token.error) {
                                var tokenError = token;
                                reject(new Error("Error aquiring token.  Error: '" + tokenError.error + "' Error Description: " + tokenError.errorDescription));
                                return;
                            }
                            resolve(token);
                        });
                    })];
            });
        });
    };
    return AdalCertificateFetchClient;
}());
exports.AdalCertificateFetchClient = AdalCertificateFetchClient;
//# sourceMappingURL=adalcertificatefetchclient.js.map