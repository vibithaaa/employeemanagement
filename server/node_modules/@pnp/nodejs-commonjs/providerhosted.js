"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderHostedRequestContext = void 0;
var tslib_1 = require("tslib");
var sptokenutils_js_1 = require("./sptokenutils.js");
var ProviderHostedRequestContext = /** @class */ (function () {
    function ProviderHostedRequestContext(siteUrl, clientId, clientSecret, realm, refreshToken, stsUri, cacheKey) {
        this.siteUrl = siteUrl;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.realm = realm;
        this.refreshToken = refreshToken;
        this.stsUri = stsUri;
        this.cacheKey = cacheKey;
    }
    ProviderHostedRequestContext.create = function (siteUrl, clientId, clientSecret, spAppToken) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var payload, appctx;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, sptokenutils_js_1.validateProviderHostedRequestToken)(spAppToken, clientSecret)];
                    case 1:
                        payload = _a.sent();
                        appctx = JSON.parse(payload.appctx);
                        return [2 /*return*/, new ProviderHostedRequestContext(siteUrl, clientId, clientSecret, payload.iss.split("@")[1], payload.refreshtoken, appctx.SecurityTokenServiceUri, appctx.CacheKey)];
                }
            });
        });
    };
    ProviderHostedRequestContext.prototype.getAddInOnlyConfig = function () {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var _a;
            return (0, tslib_1.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.getConfigOptions;
                        return [4 /*yield*/, (0, sptokenutils_js_1.getAddInOnlyAccessToken)(this.siteUrl, this.clientId, this.clientSecret, this.realm, this.stsUri)];
                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];
                }
            });
        });
    };
    ProviderHostedRequestContext.prototype.getUserConfig = function () {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var _a;
            return (0, tslib_1.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.getConfigOptions;
                        return [4 /*yield*/, (0, sptokenutils_js_1.getUserAccessToken)(this.siteUrl, this.clientId, this.clientSecret, this.refreshToken, this.realm, this.stsUri, this.cacheKey)];
                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];
                }
            });
        });
    };
    ProviderHostedRequestContext.prototype.getConfigOptions = function (token) {
        return {
            headers: {
                "Authorization": "Bearer " + token.access_token,
            },
        };
    };
    return ProviderHostedRequestContext;
}());
exports.ProviderHostedRequestContext = ProviderHostedRequestContext;
//# sourceMappingURL=providerhosted.js.map