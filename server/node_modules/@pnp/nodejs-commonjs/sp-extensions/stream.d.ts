/// <reference types="node" />
import { ODataParser } from "@pnp/odata-commonjs";
import { ReadStream } from "fs";
import { PassThrough } from "stream";
export interface IResponseBodyStream {
    body: PassThrough;
    knownLength: number;
}
export declare class StreamParser extends ODataParser<IResponseBodyStream> {
    protected parseImpl(r: Response, resolve: (value: any) => void): void;
}
declare module "@pnp/sp-commonjs/files/types" {
    interface IFile {
        /**
         * Gets a PassThrough stream representing the file
         */
        getStream(): Promise<IResponseBodyStream>;
        /**
         * Sets a file stream content chunk
         */
        setStreamContentChunked(stream: ReadStream, progress?: (data: IFileUploadProgressData) => void, chunkSize?: number): Promise<IFileAddResult>;
    }
    interface IFiles {
        /**
         * Adds a file stream in chunks
         */
        addChunked(url: string, content: Blob | ReadStream, progress?: (data: IFileUploadProgressData) => void, shouldOverWrite?: boolean, chunkSize?: number): Promise<IFileAddResult>;
    }
}
//# sourceMappingURL=stream.d.ts.map