"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultRuntime = exports.Runtime = exports.onRuntimeCreate = exports.setup = void 0;
var tslib_1 = require("tslib");
var collections_js_1 = require("./collections.js");
function setup(config, runtime) {
    if (runtime === void 0) { runtime = exports.DefaultRuntime; }
    runtime.assign(config);
}
exports.setup = setup;
// lable mapping for known config values
var s = [
    "defaultCachingStore",
    "defaultCachingTimeoutSeconds",
    "globalCacheDisable",
    "enableCacheExpiration",
    "cacheExpirationIntervalMilliseconds",
    "spfxContext",
    "ie11",
];
var runtimeCreateHooks = [];
function onRuntimeCreate(hook) {
    if (runtimeCreateHooks.indexOf(hook) < 0) {
        // apply hook logic to default runtime
        hook(exports.DefaultRuntime);
        runtimeCreateHooks.push(hook);
    }
}
exports.onRuntimeCreate = onRuntimeCreate;
var Runtime = /** @class */ (function () {
    function Runtime(_v) {
        var _this = this;
        if (_v === void 0) { _v = new Map(); }
        this._v = _v;
        var defaulter = function (key, def) {
            if (!_this._v.has(key)) {
                _this._v.set(key, def);
            }
        };
        // setup defaults
        defaulter(s[0], "session");
        defaulter(s[1], 60);
        defaulter(s[2], false);
        defaulter(s[3], false);
        defaulter(s[4], 750);
        defaulter(s[5], null);
        defaulter(s[6], false);
        runtimeCreateHooks.forEach(function (hook) { return hook(_this); });
    }
    /**
     *
     * @param config The set of properties to add to this runtime instance
     */
    Runtime.prototype.assign = function (config) {
        this._v = (0, collections_js_1.mergeMaps)(this._v, (0, collections_js_1.objectToMap)(config));
    };
    /**
     * Gets a runtime value using T to define the available keys, and R to define the type returned by that key
     *
     * @param key
     */
    Runtime.prototype.get = function (key) {
        return this._v.get(key);
    };
    /**
     * Exports the internal Map representing this runtime
     */
    Runtime.prototype.export = function () {
        var e_1, _a;
        var expt = new Map();
        try {
            for (var _b = (0, tslib_1.__values)(this._v), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = (0, tslib_1.__read)(_c.value, 2), key = _d[0], value = _d[1];
                if (key !== "__isDefault__") {
                    expt.set(key, value);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return expt;
    };
    return Runtime;
}());
exports.Runtime = Runtime;
// default runtime used globally
var _runtime = new Runtime(new Map([["__isDefault__", true]]));
exports.DefaultRuntime = _runtime;
//# sourceMappingURL=libconfig.js.map